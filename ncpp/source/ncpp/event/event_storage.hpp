#pragma once

/**
 *  @file ncpp/utilities/event_storage.hpp
 *  @brief Implements event storage.
 */



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/prerequisites.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/event/event_option.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/containers/hash_table.hpp>

#pragma endregion 



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



namespace ncpp {

    namespace event {

        template<class F_event_option__>
        class TF_event_storage {

        public:
            using F_event_option = F_event_option__;
            using F_event = TF_event<F_event_option>;
            using F_event_storage = TF_event_storage<F_event_option>;
            using F_event_hash_table_allocator = typename F_event_option::F_event_hash_table_allocator;
            using F_event_p_vector_allocator = typename F_event_option::F_event_p_vector_allocator;

            using F_event_hash_table = containers::TF_hash_table<F_event_hash_table_allocator>;
            using F_event_p_vector = eastl::vector<F_event*, F_event_p_vector_allocator>;



        private:
            F_event_hash_table event_hash_table_;
            F_event_p_vector event_p_vector_;

        public:



        public:
            inline TF_event_storage(u32 event_hash_table_hash_size = 64, u32 event_hash_table_index_size = 64, const F_event_hash_table_allocator& event_hash_table_allocator = F_event_hash_table_allocator(), const F_event_p_vector_allocator& event_p_vector_allocator = F_event_p_vector_allocator()) :
                event_hash_table_(event_hash_table_hash_size, event_hash_table_index_size, event_hash_table_allocator),
                event_p_vector_(event_p_vector_allocator)
            {

                event_p_vector_.reserve(event_hash_table_index_size);

            }
            ~TF_event_storage() {



            }



        public:
            void add_event(F_event& e) {

                assert((event_hash_table_.first(e.hash_code_) != NCPP_U32_MAX) && "this event is already added");

                u32 index = event_p_vector_.size();

                event_p_vector_.push_back(&e);

                e.index_ = index;

                event_hash_table_.add(e.hash_code(), index);
            }
            F_event& find_event(u64 hash_code) {

                u32 index = event_hash_table_.first(hash_code);

                assert((index != NCPP_U32_MAX) && "there is no event with this hash code");

                return *(event_p_vector_[index]);
            }
            void remove_event(F_event& e) {

                assert((event_hash_table_.first(e.hash_code_) == e.index_) && "invalid event to remove");

                u32 index = e.index_;
                u32 last_index = event_p_vector_.size() - 1;

                F_event& back_e = *(event_p_vector_[last_index]);

                event_p_vector_[index] = event_p_vector_.back();
                event_p_vector_.resize(last_index);

                event_hash_table_.remove(e.hash_code(), index);
                event_hash_table_.remove(back_e.hash_code(), last_index);

                event_hash_table_.add(back_e.hash_code(), index);

            }

        };



        using F_event_storage = TF_event_storage<>;



#define NCPP_STATIC_EVENTS_ADD_STEP(I, EventName) add_event(EventName);

#define NCPP_STATIC_EVENTS_GETTER_STEP(I, EventName) \
            template<> \
            inline F_event& T_get_event<decltype(EventName)>() { return EventName; };

#define NCPP_DECLARE_STATIC_EVENTS(...) \
            inline void add_static_events() {\
                \
                NCPP_EXPAND(NCPP_FOR_EACH(NCPP_STATIC_EVENTS_ADD_STEP __VA_OPT__(,) __VA_ARGS__));\
                \
            }\
            template<class F_event__> \
            inline F_event& T_get_event(); \
            NCPP_EXPAND(NCPP_FOR_EACH(NCPP_STATIC_EVENTS_GETTER_STEP __VA_OPT__(,) __VA_ARGS__));

#define NCPP_ADD_STATIC_EVENTS() add_static_events();

    }

}
