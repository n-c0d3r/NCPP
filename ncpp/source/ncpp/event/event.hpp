#pragma once

/**
 *  @file ncpp/utilities/event.hpp
 *  @brief Implements event.
 */



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/prerequisites.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/event/event_option.hpp>

#pragma endregion 



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



namespace ncpp {

    namespace event {

        template<class F_event_option__>
        class TF_event {

        private:
            using F_this = TF_event<F_event_option__>;



        public:
            using F_event_option = F_event_option__;
            using F_event = TF_event<F_event_option>;
            using F_event_storage = TF_event_storage<F_event_option>;
            using F_listener_list_allocator = typename F_event_option::F_event_listener_list_allocator;

            using F_listener = eastl::function<void(F_this&)>;
            using F_listener_list = eastl::list<F_listener, F_listener_list_allocator>;
            using F_listener_handle = typename F_listener_list::iterator;



        public:
            friend class F_event_storage;



        private:
            F_listener_list listener_list_;
            u32 index_ = 0;
            u64 hash_code_ = 0;

        public:
            inline u64 hash_code() const { return hash_code_; }



        public:
            inline TF_event(u64 hash_code = 0, const F_listener_list_allocator& listener_list_allocator = F_listener_list_allocator()) :
                listener_list_(listener_list_allocator),
                hash_code_(hash_code)
            {



            }
            ~TF_event() {



            }



        public:
            template<typename F_func__>
            inline F_listener_handle T_push_back_listener(F_func__&& func) {

                listener_list_.push_back(std::forward<F_func__>(func));

                return --listener_list_.end();
            }
            template<typename F_func__>
            inline F_listener_handle T_push_front_listener(F_func__&& func) {

                listener_list_.push_front(std::forward<F_func__>(func));

                return listener_list_.begin();
            }
            inline void remove_listener(F_listener_handle handle) {

                listener_list_.erase(handle);
            }

            void invoke() {

                for (auto& listener : listener_list_) {

                    listener(*this);

                }

            }

        };



        using F_event = TF_event<>;

    }

}
