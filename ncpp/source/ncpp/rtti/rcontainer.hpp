#pragma once

/** @file ncpp/rtti/rcontainer.hpp
*	@brief Implements rcontainer.
*/



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/prerequisites.hpp>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/iostream.hpp>
#include <ncpp/utilities/is_function.hpp>
#include <ncpp/containers/.hpp>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/rtti/traits.hpp>
#include <ncpp/rtti/security_helper.hpp>
#include <ncpp/rtti/subtype.hpp>

#pragma endregion



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



namespace ncpp {

	namespace rtti {

		template<typename F_options__>
		class TF_rcontainer {

		public:
			NCPP_RTTI_SPECIFIC_USING(F_options__);



		private:
			F_allocator allocator_;

			containers::TF_unordered_map<sz, F_robject_type_info*> hash_code_to_robject_type_info_p_map_;
			containers::TF_unordered_map<containers::TF_string<char, typename F_rtti_traits::F_allocator>, F_robject_type_info*> fullname_to_robject_type_info_p_map_;
			containers::TF_unordered_map<F_subtype, F_robject_type_info*> subtype_to_robject_type_info_p_map_;

		public:
			F_rcontainer_additional_data additional_data;

		public:
			NCPP_FORCE_INLINE F_allocator& allocator() { return allocator_; }
			NCPP_FORCE_INLINE const F_allocator& allocator() const { return allocator_; }
            
            NCPP_FORCE_INLINE const containers::TF_unordered_map<sz, F_robject_type_info*>& hash_code_to_robject_type_info_p_map() const { return hash_code_to_robject_type_info_p_map_; }
            NCPP_FORCE_INLINE const containers::TF_unordered_map<containers::TF_string<char, typename F_rtti_traits::F_allocator>, F_robject_type_info*>& fullname_to_robject_type_info_p_map() const { return fullname_to_robject_type_info_p_map_; }
            NCPP_FORCE_INLINE const containers::TF_unordered_map<F_subtype, F_robject_type_info*>& subtype_to_robject_type_info_p_map() const { return subtype_to_robject_type_info_p_map_; }

            inline F_robject_type_info* robject_type_info(sz hash_code) {

                auto it = hash_code_to_robject_type_info_p_map_.find(hash_code);

                if (it == hash_code_to_robject_type_info_p_map_.end())
                    return 0;

                return it->second;
            }
            inline F_robject_type_info* robject_type_info(containers::TF_view<containers::TF_string<char, F_allocator>> fullname) {

                auto it = fullname_to_robject_type_info_p_map_.find(fullname);

                if (it == fullname_to_robject_type_info_p_map_.end())
                    return 0;

                return it->second;
            }
            inline F_robject_type_info* robject_type_info(F_subtype subtype) {

                auto it = subtype_to_robject_type_info_p_map_.find(subtype);

                if (it == subtype_to_robject_type_info_p_map_.end())
                    return 0;

                return it->second;
            }
			inline const F_robject_type_info* robject_type_info(sz hash_code) const {

				auto it = hash_code_to_robject_type_info_p_map_.find(hash_code);

				if (it == hash_code_to_robject_type_info_p_map_.end())
					return 0;

				return it->second;
			}
			inline const F_robject_type_info* robject_type_info(containers::TF_view<containers::TF_string<char, F_allocator>> fullname) const {

				auto it = fullname_to_robject_type_info_p_map_.find(fullname);

				if (it == fullname_to_robject_type_info_p_map_.end())
					return 0;

				return it->second;
			}
            inline const F_robject_type_info* robject_type_info(F_subtype subtype) const {

                auto it = subtype_to_robject_type_info_p_map_.find(subtype);

                if (it == subtype_to_robject_type_info_p_map_.end())
                    return 0;

                return it->second;
            }
			inline void add_robject_type_info(F_robject_type_info* info) {

                u64 hash_code = info->subtype().data().hash_code;

				auto it = hash_code_to_robject_type_info_p_map_.find(hash_code);

				if (it != hash_code_to_robject_type_info_p_map_.end())
					return;

				hash_code_to_robject_type_info_p_map_[hash_code] = info;
				fullname_to_robject_type_info_p_map_[info->subtype().data().fullname] = info;
				subtype_to_robject_type_info_p_map_[info->subtype()] = info;
			}
			inline void remove_robject_type_info(sz hash_code) {

				auto it = hash_code_to_robject_type_info_p_map_.find(hash_code);

				if (it != hash_code_to_robject_type_info_p_map_.end()) {

					fullname_to_robject_type_info_p_map_.erase(fullname_to_robject_type_info_p_map_.find(it->second->subtype().data().fullname));
					subtype_to_robject_type_info_p_map_.erase(subtype_to_robject_type_info_p_map_.find(it->second->subtype()));

					F_rtti_traits::template T_delete<F_robject_type_info>(&allocator_, it->second);

					hash_code_to_robject_type_info_p_map_.erase(it);

				}
			}
			inline void remove_robject_type_info(containers::TF_view<containers::TF_string<char, F_allocator>> fullname) {

				auto it = fullname_to_robject_type_info_p_map_.find(fullname);

				if (it != fullname_to_robject_type_info_p_map_.end()) {

					hash_code_to_robject_type_info_p_map_.erase(hash_code_to_robject_type_info_p_map_.find(it->second->subtype().data().hash_code));
                    subtype_to_robject_type_info_p_map_.erase(subtype_to_robject_type_info_p_map_.find(it->second->subtype()));

					F_rtti_traits::template T_delete<F_robject_type_info>(&allocator_, it->second);

					fullname_to_robject_type_info_p_map_.erase(it);

				}
			}



		public:
			NCPP_FORCE_INLINE TF_rcontainer(const F_allocator& allocator = F_allocator()) :
				allocator_(allocator)
			{



			}
			~TF_rcontainer() {

				clear();

			}



		public:
			void clear() {

				for (auto it = hash_code_to_robject_type_info_p_map_.begin(); it != hash_code_to_robject_type_info_p_map_.end();) {

					auto current_it = it++;

					remove_robject_type_info(current_it->first);

				}

			}

		};

	}

}
