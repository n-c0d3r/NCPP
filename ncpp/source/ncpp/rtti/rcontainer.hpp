#pragma once

/** @file ncpp/rtti/rcontainer.hpp
*	@brief Implements rcontainer.
*/



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/prerequisites.hpp>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/iostream.hpp>
#include <ncpp/utilities/is_function.hpp>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/rtti/traits.hpp>
#include <ncpp/rtti/rflag.hpp>

#pragma endregion



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



namespace ncpp {

	namespace rtti {

		template<typename F_options__>
		class TF_rcontainer {

		public:
			NCPP_RTTI_SEPECIFIC_USING(F_options__);



		private:
			F_allocator allocator_;

			eastl::unordered_map<sz, F_robject_type_info*> hash_code_to_robject_type_info_p_map_;
			eastl::unordered_map<eastl::string, F_robject_type_info*> name_to_robject_type_info_p_map_;

		public:
			F_rcontainer_additional_data additional_data;

		public:
			inline F_allocator& allocator() { return allocator_; }
			inline const F_allocator& allocator() const { return allocator_; }

			inline F_robject_type_info* robject_type_info(sz hash_code) {

				auto it = hash_code_to_robject_type_info_p_map_.find(hash_code);

				if (it == hash_code_to_robject_type_info_p_map_.end())
					return 0;

				return it->second;
			}
			inline const F_robject_type_info* robject_type_info(sz hash_code) const {

				auto it = hash_code_to_robject_type_info_p_map_.find(hash_code);

				if (it == hash_code_to_robject_type_info_p_map_.end())
					return 0;

				return it->second;
			}
			inline F_robject_type_info* robject_type_info(const eastl::string& name) {

				auto it = name_to_robject_type_info_p_map_.find(name);

				if (it == name_to_robject_type_info_p_map_.end())
					return 0;

				return it->second;
			}
			inline const F_robject_type_info* robject_type_info(const eastl::string& name) const {

				auto it = name_to_robject_type_info_p_map_.find(name);

				if (it == name_to_robject_type_info_p_map_.end())
					return 0;

				return it->second;
			}
			inline void add_robject_type_info(F_robject_type_info* info) {

				auto it = hash_code_to_robject_type_info_p_map_.find(info->hash_code());

				if (it != hash_code_to_robject_type_info_p_map_.end())
					return;

				hash_code_to_robject_type_info_p_map_[info->hash_code()] = info;
				name_to_robject_type_info_p_map_[info->name()] = info;
			}
			inline void remove_robject_type_info(sz hash_code) {

				auto it = hash_code_to_robject_type_info_p_map_.find(hash_code);

				if (it != hash_code_to_robject_type_info_p_map_.end()) {

					name_to_robject_type_info_p_map_.erase(name_to_robject_type_info_p_map_.find(it->second->name()));

					F_rtti_traits::template T_delete<F_robject_type_info>(allocator_, it->second);

					hash_code_to_robject_type_info_p_map_.erase(it);

				}
			}
			inline void remove_robject_type_info(const eastl::string& name) {

				auto it = name_to_robject_type_info_p_map_.find(name);

				if (it != name_to_robject_type_info_p_map_.end()) {

					hash_code_to_robject_type_info_p_map_.erase(hash_code_to_robject_type_info_p_map_.find(it->second->hash_code()));

					F_rtti_traits::template T_delete<F_robject_type_info>(allocator_, it->second);

					name_to_robject_type_info_p_map_.erase(it);

				}
			}



		public:
			inline TF_rcontainer(const F_allocator& allocator = F_allocator()) :
				allocator_(allocator)
			{



			}
			~TF_rcontainer() {

				clear();

			}



		public:
			void clear() {

				for (auto it = hash_code_to_robject_type_info_p_map_.begin(); it != hash_code_to_robject_type_info_p_map_.end();) {

					auto current_it = it++;

					remove_robject_type_info(current_it->first);

				}

			}

		};

	}

}