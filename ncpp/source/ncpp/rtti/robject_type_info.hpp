#pragma once

/** @file ncpp/rtti/robject_type_info.hpp
*	@brief Implements robject type info.
*/



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/prerequisites.hpp>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/iostream.hpp>
#include <ncpp/utilities/is_function.hpp>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/rtti/traits.hpp>
#include <ncpp/rtti/rflag.hpp>

#pragma endregion



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



namespace ncpp {

	namespace rtti {

		template<typename F_options__>
		class TF_robject_type_info {

		public:
			NCPP_RTTI_SEPECIFIC_USING(F_options__);



		private:
			F_rcontainer* rcontainer_p_ = 0;
			sz hash_code_ = 0;
			eastl::string name_;
			eastl::set<F_robject_type_info*> base_type_info_p_set_;
            
            eastl::unordered_map<eastl::string, F_robject_member_info*> name_to_member_info_p_map_;

		public:
			F_robject_type_info_additional_data additional_data;

		public:
			NCPP_FORCE_INLINE F_rcontainer* rcontainer_p() { return rcontainer_p_; }
			NCPP_FORCE_INLINE const F_rcontainer* rcontainer_p() const { return rcontainer_p_; }
			NCPP_FORCE_INLINE sz hash_code() const { return hash_code_; }
			NCPP_FORCE_INLINE eastl::string name() const { return name_; }

			NCPP_FORCE_INLINE const eastl::set<F_robject_type_info*>& base_type_info_p_set() const { return base_type_info_p_set_; }
            NCPP_FORCE_INLINE b8 is_has_base(F_robject_type_info* base_type_info_p) const {
                
                return (base_type_info_p_set_.find(base_type_info_p) != base_type_info_p_set_.end());
            }
            NCPP_FORCE_INLINE void add_base(F_robject_type_info* base_type_info_p) {
                
                assert(!is_has_base(base_type_info_p) && "this base type info is already added");
                
                base_type_info_p_set_.insert(base_type_info_p);
            }
            NCPP_FORCE_INLINE void remove_base(F_robject_type_info* base_type_info_p) {
                
                assert(is_has_base(base_type_info_p) && "this base type info is not added");
                
                base_type_info_p_set_.erase(base_type_info_p_set_.find(base_type_info_p));
            }
            
            NCPP_FORCE_INLINE const eastl::unordered_map<eastl::string, F_robject_member_info*>& name_to_member_info_p_map() const { return name_to_member_info_p_map_; }

			inline F_robject_member_info* member_info(const eastl::string& name) {

				auto it = name_to_member_info_p_map_.find(name);

				if (it == name_to_member_info_p_map_.end())
					return 0;

				return it->second;
			}
			inline const F_robject_member_info* member_info(const eastl::string& name) const {

				auto it = name_to_member_info_p_map_.find(name);

				if (it == name_to_member_info_p_map_.end())
					return 0;

				return it->second;
			}
			inline void add_member_info(F_robject_member_info* info) {

				auto it = name_to_member_info_p_map_.find(info->name());

				if (it != name_to_member_info_p_map_.end())
					return;

				name_to_member_info_p_map_[info->name()] = info;
			}
			inline void remove_member_info(const eastl::string& name) {

				auto it = name_to_member_info_p_map_.find(name);

				if (it != name_to_member_info_p_map_.end()) {

					F_rtti_traits::template T_delete<F_robject_member_info>(rcontainer_p_->allocator(), it->second);

					name_to_member_info_p_map_.erase(it);

				}
			}



		public:
			NCPP_FORCE_INLINE TF_robject_type_info(F_rcontainer* rcontainer_p, sz hash_code, const eastl::string& name) :
				rcontainer_p_(rcontainer_p),
				hash_code_(hash_code),
				name_(name)
			{



			}
			~TF_robject_type_info() {

				clear();

			}



		public:
			void clear() {

				for (auto it = name_to_member_info_p_map_.begin(); it != name_to_member_info_p_map_.end();) {

					auto current_it = it++;

					remove_member_info(current_it->first);

				}

			}

		};



		template<
			class F_robject__,

			NCPP_RTTI_SEPECIFIC_TARGS()
		>
		F_robject_type_info__* T_reflect_object_type(
			F_rcontainer__* rcontainer_p,
			rflag flag = NCPP_RFLAG_DEFAULT
		) {

			F_robject_type_info__* robject_type_info_p = rcontainer_p->robject_type_info(F_robject__::static_type_hash_code());

			if (robject_type_info_p)
				return robject_type_info_p;

			robject_type_info_p = F_rtti_traits__::template T_new<F_robject_type_info__>(
				rcontainer_p->allocator(),
				rcontainer_p,
				F_robject__::static_type_hash_code(),
				F_robject__::static_type_name()
			);

			rcontainer_p->add_robject_type_info(robject_type_info_p);

			return robject_type_info_p;
		}

	}

}
