#include <ncpp/.hpp>



namespace ncpp {

	namespace rtti {



        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



        thread_local utilities::lref_t<robject_i> current_constructing_robject_ref_g;
        thread_local utilities::lref_t<robject_i> last_constructor_called_robject_ref_g;

        robject_i& current_constructing_object() {

            return *current_constructing_robject_ref_g;
        }



        robject_constructor_begin_scope::robject_constructor_begin_scope() :
            prev_robject_ref(current_constructing_object())
        {

            current_constructing_robject_ref_g = last_constructor_called_robject_ref_g;

        }
        robject_constructor_begin_scope::~robject_constructor_begin_scope() {



        }

        robject_constructor_end_scope::robject_constructor_end_scope(robject_i& robject, robject_i& prev_robject) :
            prev_robject_ref(prev_robject)
        {



        }
        robject_constructor_end_scope::~robject_constructor_end_scope() {

            current_constructing_robject_ref_g = prev_robject_ref;

        }



        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



        robject_i::robject_i() :
            name_to_member_handle_map_()
        {

            last_constructor_called_robject_ref_g = *this;

        }
        robject_i::~robject_i() {



        }

        void robject_i::copy(const robject_i& other) {

            copy_variable_members(other);

        }



        void robject_i::copy_variable_members(const robject_i& other) {

            for (auto& member_handle_it : name_to_member_handle_map_) {

                if (other.is_has_member(member_handle_it.first)) {

                    robject_member_handle& member_handle = member_handle_it.second;



                    if (!member_handle.is_function) {

                        copy_variable_member(other, member_handle_it.first);

                    }

                }

            }

        }

        void robject_i::copy_variable_member(const robject_i& other, const containers::native_string& member_name) {

            if (other.is_has_member(member_name)) {

                robject_member_handle& member_handle = at(member_name);

                member_handle.copy_func_ptr(other, *this);

            }

        }

	}

}