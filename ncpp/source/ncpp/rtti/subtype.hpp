#pragma once

/** @file ncpp/rtti/subtype.hpp
*	@brief Implements subtype.
*/



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/prerequisites.hpp>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/utilities/.hpp>

#pragma endregion



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



namespace ncpp {

	namespace rtti {

        struct I_subtype_data {

            const char* fullname = 0;

            u64 hash_type = 0;

            u16 size = 0;
            u16 alignment = 0;

        };

        struct F_subtype_data final : public I_subtype_data {

            template<typename F__>
            static NCPP_FORCE_INLINE F_subtype_data T_default() noexcept {

                return F_subtype_data {

                    {

                        utilities::T_type_fullname<F__>(),

                        utilities::T_type_hash_code<F__>,

                        utilities::T_sizeof<F__>,
                        NCPP_ALIGNOF(F__)

                    }

                };
            }

        };

        template<typename F__, class F_subtype_data__ = F_subtype_data>
        static inline F_subtype_data__ T_default_subtype_data = F_subtype_data__::template T_default<F__>();



        template<typename F__ = void, typename F_subtype_data__ = F_subtype_data>
        class TF_subtype {

        public:
            template<typename F_other__, typename F_other_subtype_data__>
            friend class TF_subtype;

            using F = F__;
            using F_subtype_data = F_subtype_data__;



        private:
            F_subtype_data* data_p_ = 0;

        public:
            NCPP_FORCE_INLINE const F_subtype_data& data() const { return *data_p_; }

            NCPP_FORCE_INLINE b8 is_default() const { return (data_p_ == (&T_default_subtype_data<F__, F_subtype_data__>)); }



        public:
            NCPP_FORCE_INLINE TF_subtype() noexcept :
                data_p_(&T_default_subtype_data<F__, F_subtype_data__>)
            {

            }
            NCPP_FORCE_INLINE ~TF_subtype() noexcept {

                reset();
            }



        public:
            template<typename F_other__, std::enable_if_t<std::is_convertible_v<F_other__, F__> || std::is_same_v<F__, void>, i32> = 0>
            NCPP_FORCE_INLINE TF_subtype(const TF_subtype<F_other__, F_subtype_data__>& x) noexcept :
                data_p_(x.data_p_)
            {

            }
            template<typename F_other__, std::enable_if_t<std::is_convertible_v<F_other__, F__> || std::is_same_v<F__, void>, i32> = 0>
            NCPP_FORCE_INLINE TF_subtype& operator = (const TF_subtype<F_other__, F_subtype_data__>& x) noexcept {

                data_p_ = x.data_p_;

                return *this;
            }



        public:
            template<typename F_other__, std::enable_if_t<std::is_convertible_v<F_other__, F__> || std::is_same_v<F__, void>, i32> = 0>
            NCPP_FORCE_INLINE TF_subtype(TF_subtype<F_other__, F_subtype_data__>&& x) noexcept :
                data_p_(x.data_p_)
            {

                x.reset();
            }
            template<typename F_other__, std::enable_if_t<std::is_convertible_v<F_other__, F__> || std::is_same_v<F__, void>, i32> = 0>
            NCPP_FORCE_INLINE TF_subtype& operator = (TF_subtype<F_other__, F_subtype_data__>&& x) noexcept {

                data_p_ = x.data_p_;

                x.reset();

                return *this;
            }



        public:
            NCPP_FORCE_INLINE void reset() noexcept {

                data_p_ = &T_default_subtype_data<F__, F_subtype_data__>;
            }

        };

        using F_subtype = TF_subtype<>;

	}

}