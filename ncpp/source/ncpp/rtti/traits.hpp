#pragma once

/** @file ncpp/rtti/traits.hpp
*	@brief Implements rtti traits.
*/



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/prerequisites.hpp>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/iostream.hpp>
#include <ncpp/utilities/.hpp>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/rtti/rflag.hpp>
#include <ncpp/rtti/rtti_flag.hpp>
#include <ncpp/rtti/robject_flag.hpp>

#pragma endregion



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



namespace ncpp {

	namespace rtti {

#define NCPP_RTTI_SEPECIFIC_TARGS() \
			class rtti_options__,\
			class rtti_traits__ = ncpp::rtti::traits_t<rtti_options__>,\
			class allocator_type__ = typename rtti_traits__::allocator_type,\
			class rcontainer_type__ = typename rtti_traits__::rcontainer_type,\
			class robject_type_info_type__ = typename rtti_traits__::robject_type_info_type,\
			class robject_member_info_type__ = typename rtti_traits__::robject_member_info_type,\
			class rcontainer_additional_data_type__ = typename rtti_traits__::rcontainer_additional_data_type,\
			class robject_type_info_additional_data_type__ = typename rtti_traits__::robject_type_info_additional_data_type,\
			class robject_member_info_additional_data_type__ = typename rtti_traits__::robject_member_info_additional_data_type

#define NCPP_RTTI_PASS_SEPECIFIC_TARGS() \
			rtti_options__, \
			rtti_traits__, \
			allocator_type__, \
			rcontainer_type__, \
			robject_type_info_type__, \
			robject_member_info_type__,\
			rcontainer_additional_data_type__,\
			robject_type_info_additional_data_type__,\
			robject_member_info_additional_data_type__

#define NCPP_RTTI_SEPECIFIC_USING(RTTIOptions) \
			using rtti_options = RTTIOptions;\
			using rtti_traits = ncpp::rtti::traits_t<rtti_options>;\
			using allocator_type = typename rtti_traits::allocator_type;\
			using rcontainer_type = typename rtti_traits::rcontainer_type;\
			using robject_type_info_type = typename rtti_traits::robject_type_info_type;\
			using robject_member_info_type = typename rtti_traits::robject_member_info_type;\
			using rcontainer_additional_data_type = typename rtti_traits::rcontainer_additional_data_type;\
			using robject_type_info_additional_data_type = typename rtti_traits::robject_type_info_additional_data_type;\
			using robject_member_info_additional_data_type = typename rtti_traits::robject_member_info_additional_data_type;

#define NCPP_RTTI_PASS_SEPECIFIC_USING() \
			rtti_options, \
			rtti_traits, \
			allocator_type, \
			rcontainer_type, \
			robject_type_info_type, \
			robject_member_info_type,\
			rcontainer_additional_data_type,\
			robject_type_info_additional_data_type,\
			robject_member_info_additional_data_type



		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



		template<typename options__>
		class rcontainer_t;

		template<typename options__>
		class robject_type_info_t;

		template<typename options__>
		struct robject_member_info_t;



		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



		struct default_options {

			struct rcontainer_additional_data {

			};

			struct robject_type_info_additional_data {

			};

			struct robject_member_info_additional_data {

			};

			using allocator = NCPP_DEFAULT_ALLOCATOR;

		};



		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



		template<class options__>
		struct traits_t {

			using options = options__;

			using allocator_type = typename options::allocator;

			using rcontainer_additional_data_type = typename options::rcontainer_additional_data;
			using robject_type_info_additional_data_type = typename options::robject_type_info_additional_data;
			using robject_member_info_additional_data_type = typename options::robject_member_info_additional_data;

			using rcontainer_type = rcontainer_t<options>;
			using robject_type_info_type = robject_type_info_t<options>;
			using robject_member_info_type = robject_member_info_t<options>;



			template<class type__>
			static inline type__* allocate_t(allocator_type& allocator) {

				return reinterpret_cast<type__*>(allocator.allocate(sizeof(type__), 0));
			}
			template<class type__, typename... arg_types__>
			static inline type__* new_t(allocator_type& allocator, arg_types__&&... args) {

				return new(allocate_t<type__>(allocator)) type__(std::forward<arg_types__>(args)...);
			}
			template<class type__>
			static inline void delete_t(allocator_type& allocator, type__* pointer) {

				pointer->~type__();

				allocator.deallocate(pointer, sizeof(type__));
			}



			template<
				class robject_type__,
				std::enable_if_t<
					NCPP_RTTI_IS_HAS_FLAG(robject_type__, robject_flag) && NCPP_RTTI_IS_HAS_FLAG(robject_type__, robject_virtual_flag),
					i32
				> = 0
			>
			static void safe_reflect_t(rcontainer_type* rcontainer_p, robject_type__* object_p, rtti::rflag rflag = NCPP_RFLAG_DEFAULT) {

				if(object_p)
					object_p->virtual_reflect(rcontainer_p, rflag);
				else
					robject_type__::static_reflect(rcontainer_p, rflag);

			}
			template<
				class robject_type__,
				std::enable_if_t<
					NCPP_RTTI_IS_HAS_FLAG(robject_type__, robject_flag) && !NCPP_RTTI_IS_HAS_FLAG(robject_type__, robject_virtual_flag),
					i32
				> = 0
			>
			static void safe_reflect_t(rcontainer_type* rcontainer_p, robject_type__* object_p, rtti::rflag rflag = NCPP_RFLAG_DEFAULT) {

				robject_type__::static_reflect(rcontainer_p, rflag);

			}
			template<
				class robject_type__,
				std::enable_if_t<
					!NCPP_RTTI_IS_HAS_FLAG(robject_type__, robject_flag),
					i32
				> = 0
			>
			static void safe_reflect_t(rcontainer_type* rcontainer_p, robject_type__* object_p, rtti::rflag rflag = NCPP_RFLAG_DEFAULT) {



			}




			template<typename robject_type__, class = void>
			struct safe_base_type_t {

				using type = void;

			};

			template<typename robject_type__>
			struct safe_base_type_t<
				robject_type__,
				std::void_t<
					decltype(std::declval<robject_type__::base_type>())
				>
			> {

				using type = typename robject_type__::base_type;

			};

		};

	}

}