#pragma once

/** @file ncpp/rtti/robject.hpp
*	@brief Implements reflected object.
*/



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/prerequisites.hpp>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/iostream.hpp>
#include <ncpp/utilities/is_function.hpp>

#pragma endregion



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



namespace ncpp {

	namespace rtti {

		class rcontext;



		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#define NCPP_PRIVATE_KEYWORD private:
#define NCPP_PROTECTED_KEYWORD protected:
#define NCPP_PUBLIC_KEYWORD public:



		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



		struct robject_flag {



		};

		struct robject_support_virtual_flag {



		};

		using name_getter_type = eastl::string(*)();

		template<typename object_type__, typename member_type__>
		using member_getter_type_t = utilities::nth_template_arg_t<utilities::is_function_t<member_type__>::value, const member_type__&, void>::type (*)(const object_type__& obj);

		template<typename object_type__>
		static inline constexpr b8 is_support_virtual_t = utilities::is_ostreamable_t<object_type__, robject_support_virtual_flag>::value;
		template<typename type__>
		static inline constexpr b8 is_robject_t = utilities::is_ostreamable_t<type__, robject_flag>::value;



		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



		struct rmember {

			using ostream_function_type = std::ostream& (std::ostream& os, void* object_p, u32 tabs);



			ostream_function_type* ostream_function_p = 0;
			sz object_type_hash_code = 0;
			sz object_offset = 0;



			inline std::ostream& ostream(void* object_p, u32 tabs = 0, std::ostream& os = std::cout) const {

				return ostream_function_p(os, reinterpret_cast<u8*>(object_p) + object_offset, tabs);
			}

		};



		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



		class reflect_base {

		protected:
			reflect_base(rcontext& context);

		};

		rcontext& current_context();
		sz current_object_offset();
		void set_current_object_offset(sz new_offset);



		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



		class rcontext {

		private:
			eastl::unordered_map<eastl::string, rmember> name_to_member_map_;
			eastl::string name_;
			sz hash_code_ = 0;



		public:
			inline b8 is_has_member(const eastl::string& name) const { return name_to_member_map_.find(name) != name_to_member_map_.end(); }

			inline const rmember& member(const eastl::string& name) const { 

				assert(is_has_member(name));
				
				return name_to_member_map_.find(name)->second; 
			}
			inline rmember& member(const eastl::string& name) {

				assert(is_has_member(name));
				
				return name_to_member_map_.find(name)->second; 
			}

			inline const eastl::string& name() const { return name_; }
			inline void set_name(const eastl::string& new_name) { name_ = new_name; }

			inline sz hash_code() const { return hash_code_; }
			inline void set_hash_code(sz new_hash_code) { hash_code_ = new_hash_code; }

			const eastl::unordered_map<eastl::string, rmember>& name_to_member_map() const { return name_to_member_map_; };



		public:
			inline rcontext() {



			}
			~rcontext() {



			}



		public:
			template<typename type__>
			void reflect_type_t() {

				auto _ = type__::reflect(*this);

			}
			template<typename type__, std::enable_if_t<is_support_virtual_t<type__>, i32> = 0>
			void reflect(const type__& object) {

				object.virtual_reflect(*this);

			}
			template<typename type__, std::enable_if_t<!is_support_virtual_t<type__>, i32> = 0>
			void reflect(const type__& object) {

				reflect_type_t<type__>();

			}

			template<
				typename object_type__, 
				typename member_type__,
				member_getter_type_t<object_type__, member_type__> member_getter__,
				std::enable_if_t<!utilities::is_function_t<member_type__>::value, i32> = 0
			>
			void add_member_t(const eastl::string& member_name) {

				name_to_member_map_[member_name] = {
				
					// ostream function
					[](std::ostream& os, void* object_p, u32 tabs) -> std::ostream& {

						return safe_ostream_with_tab_t<std::ostream, ostream_input_t<member_type__>>(
							os, 
							ostream_input_t<member_type__> { 
								member_getter__(*((const object_type__*)object_p)),
								tabs 
							}
						);
					},

					typeid(object_type__).hash_code(),

					current_object_offset()
				
				};

			}
			template<
				typename object_type__,
				typename member_type__,
				member_getter_type_t<object_type__, member_type__> member_getter__,
				std::enable_if_t<utilities::is_function_t<member_type__>::value, i32> = 0
			>
			void add_member_t(const eastl::string& member_name) {

				assert(!is_has_member(member_name) && "member is already added");

				name_to_member_map_[member_name] = {

					// ostream function
					[](std::ostream& os, void* object_p, u32 tabs) -> std::ostream& {
						
						return safe_ostream_with_tab_t<std::ostream, const char*>(
							os,
							ostream_input_t<const char*> {
								("\x1B[33m" + eastl::string(typeid(member_type__).name()) + "\033[0m").c_str(),
								tabs
							}
						);
					},

					typeid(object_type__).hash_code(),

					current_object_offset()

				};

			}
			void remove_member_t(const eastl::string& member_name) {

				assert(is_has_member(member_name) && "member is not exist");

				name_to_member_map_.erase(member_name);

			}

		};



		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



		template<b8 define_items__, typename type__>
		struct variable_wrapper_t {

			

		};

		template<typename type__>
		struct variable_wrapper_t<false, type__> {

			using type = void();

		};

		template<typename type__>
		struct variable_wrapper_t<true, type__> {

			using type = type__;

		};



		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



		template<b8 define_items__, typename object_type__, typename member_type__, member_getter_type_t<object_type__, member_type__> member_getter__, ncpp::rtti::name_getter_type name_getter__>
		struct reflector_wrapper_t {



		};

		template<typename object_type__, typename member_type__, member_getter_type_t<object_type__, member_type__> member_getter__, ncpp::rtti::name_getter_type name_getter__>
		struct reflector_wrapper_t<false, object_type__, member_type__, member_getter__, name_getter__> {

			struct type {

				inline type() {

					current_context().add_member_t<object_type__, member_type__, member_getter__>(name_getter__());

				}

			};

		};

		template<typename object_type__, typename member_type__, member_getter_type_t<object_type__, member_type__> member_getter__, ncpp::rtti::name_getter_type name_getter__>
		struct reflector_wrapper_t<true, object_type__, member_type__, member_getter__, name_getter__> {

			using type = void();

		};



		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



		template<b8 define_items__, typename object_type__, typename base_type__>
		struct base_wrapper_t {



		};

		template<typename object_type__, typename base_type__>
		struct base_wrapper_t<false, object_type__, base_type__> {

			struct type {

				inline type() {

					sz obj_offset = current_object_offset();

					set_current_object_offset(
						reinterpret_cast<sz>(
							&((base_type__&)(*reinterpret_cast<object_type__*>(0)))
						)
					);

					current_context().reflect_type_t<base_type__>();

					set_current_object_offset(obj_offset);

				}

			};

		};

		template<typename object_type__, typename base_type__>
		struct base_wrapper_t<true, object_type__, base_type__> {

			using type = void();

		};



		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




#ifdef NCPP_ENABLE_RTTI
#define NCPP_ROBJECT(ClassName, Items) NCPP_PUBLIC_KEYWORD\
			using current_class = ClassName;\
			friend class ncpp::rtti::rcontext;\
		NCPP_PRIVATE_KEYWORD\
			template<typename type__>\
			using variable_wrapper_t = typename ncpp::rtti::variable_wrapper_t<true, type__>::type;\
			template<typename type__, ncpp::rtti::member_getter_type_t<current_class, type__> member_getter__, ncpp::rtti::name_getter_type name_getter__>\
			using reflector_wrapper_t = typename ncpp::rtti::reflector_wrapper_t<true, current_class, type__, member_getter__, name_getter__>::type;\
			template<typename base_type__>\
			using base_wrapper_t = typename ncpp::rtti::base_wrapper_t<true, current_class, base_type__>::type;\
			using support_virtual_flag_type = ncpp::rtti::robject_support_virtual_flag;\
		NCPP_PUBLIC_KEYWORD friend current_class& operator << (current_class&, const ncpp::rtti::robject_flag& flag) { return *reinterpret_cast<current_class*>(0); }\
		NCPP_PUBLIC_KEYWORD\
			Items;\
		\
		NCPP_PRIVATE_KEYWORD\
			class reflect;\
			friend class reflect;\
			class reflect : public ncpp::rtti::reflect_base {\
				\
				NCPP_PRIVATE_KEYWORD\
					template<typename type__>\
					using variable_wrapper_t = typename ncpp::rtti::variable_wrapper_t<false, type__>::type; \
					template<typename type__, ncpp::rtti::member_getter_type_t<current_class, type__> member_getter__, ncpp::rtti::name_getter_type name_getter__>\
					using reflector_wrapper_t = typename ncpp::rtti::reflector_wrapper_t<false, current_class, type__, member_getter__, name_getter__>::type;\
					template<typename base_type__>\
					using base_wrapper_t = typename ncpp::rtti::base_wrapper_t<false, current_class, base_type__>::type;\
					using support_virtual_flag_type = void(*)();\
				\
				NCPP_PUBLIC_KEYWORD\
					Items;\
				\
				NCPP_PUBLIC_KEYWORD\
					inline reflect(ncpp::rtti::rcontext& context) : ncpp::rtti::reflect_base(context) {\
						context.set_name(#ClassName);\
						context.set_hash_code(typeid(#ClassName).hash_code());\
					}\
				\
			};
#else
#define NCPP_ROBJECT(ClassName, Items) NCPP_PUBLIC_KEYWORD Items;
#endif

		////////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////

#ifdef NCPP_ENABLE_RTTI
#define NCPP_PRIVATE_V(Type, Name) \
			NCPP_PRIVATE_KEYWORD variable_wrapper_t<Type> Name;\
			NCPP_PUBLIC_KEYWORD using Name##_type = Type;\
			NCPP_PRIVATE_KEYWORD static inline eastl::string Name##_name_cstr() { return #Name; };\
			NCPP_PRIVATE_KEYWORD static inline const Name##_type& Name##_getter(const current_class& obj) { return obj.##Name; };\
			NCPP_PRIVATE_KEYWORD reflector_wrapper_t<Type, &current_class::Name##_getter, &current_class::Name##_name_cstr> Name##_reflector;
#else
#define NCPP_PRIVATE_V(Type, Name) NCPP_PUBLIC_KEYWORD Type Name;
#endif

		////////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////

#ifdef NCPP_ENABLE_RTTI
#define NCPP_PRIVATE_F(Type, Name) \
			NCPP_PRIVATE_KEYWORD variable_wrapper_t<Type> Name;\
			NCPP_PUBLIC_KEYWORD using Name##_type = Type;\
			NCPP_PRIVATE_KEYWORD static inline eastl::string Name##_name_cstr() { return #Name; };\
			NCPP_PRIVATE_KEYWORD static inline void Name##_getter(const current_class& obj) { };\
			NCPP_PRIVATE_KEYWORD reflector_wrapper_t<Type, &current_class::Name##_getter, &current_class::Name##_name_cstr> Name##_reflector;
#else
#define NCPP_PRIVATE_F(Type, Name) NCPP_PUBLIC_KEYWORD Type Name;
#endif

		////////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////

#ifdef NCPP_ENABLE_RTTI
#define NCPP_PROTECTED_V(Type, Name) \
			NCPP_PROTECTED_KEYWORD variable_wrapper_t<Type> Name;\
			NCPP_PUBLIC_KEYWORD using Name##_type = Type;\
			NCPP_PRIVATE_KEYWORD static inline eastl::string Name##_name_cstr() { return #Name; };\
			NCPP_PRIVATE_KEYWORD static inline const Name##_type& Name##_getter(const current_class& obj) { return obj.##Name; };\
			NCPP_PRIVATE_KEYWORD reflector_wrapper_t<Type, &current_class::Name##_getter, &current_class::Name##_name_cstr> Name##_reflector;
#else
#define NCPP_PROTECTED_V(Type, Name) NCPP_PUBLIC_KEYWORD Type Name;
#endif

		////////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////

#ifdef NCPP_ENABLE_RTTI
#define NCPP_PROTECTED_F(Type, Name) \
			NCPP_PROTECTED_KEYWORD variable_wrapper_t<Type> Name;\
			NCPP_PUBLIC_KEYWORD using Name##_type = Type;\
			NCPP_PRIVATE_KEYWORD static inline eastl::string Name##_name_cstr() { return #Name; };\
			NCPP_PRIVATE_KEYWORD static inline void Name##_getter(const current_class& obj) { };\
			NCPP_PRIVATE_KEYWORD reflector_wrapper_t<Type, &current_class::Name##_getter, &current_class::Name##_name_cstr> Name##_reflector;
#else
#define NCPP_PROTECTED_F(Type, Name) NCPP_PUBLIC_KEYWORD Type Name;
#endif

		////////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////

#ifdef NCPP_ENABLE_RTTI
#define NCPP_PUBLIC_V(Type, Name) \
			NCPP_PUBLIC_KEYWORD variable_wrapper_t<Type> Name;\
			NCPP_PUBLIC_KEYWORD using Name##_type = Type;\
			NCPP_PRIVATE_KEYWORD static inline eastl::string Name##_name_cstr() { return #Name; };\
			NCPP_PRIVATE_KEYWORD static inline const Name##_type& Name##_getter(const current_class& obj) { return obj.##Name; };\
			NCPP_PRIVATE_KEYWORD reflector_wrapper_t<Type, &current_class::Name##_getter, &current_class::Name##_name_cstr> Name##_reflector;
#else
#define NCPP_PUBLIC_V(Type, Name) NCPP_PUBLIC_KEYWORD Type Name;
#endif

		////////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////

#ifdef NCPP_ENABLE_RTTI
#define NCPP_PUBLIC_F(Type, Name) \
			NCPP_PUBLIC_KEYWORD variable_wrapper_t<Type> Name;\
			NCPP_PUBLIC_KEYWORD using Name##_type = Type;\
			NCPP_PRIVATE_KEYWORD static inline eastl::string Name##_name_cstr() { return #Name; };\
			NCPP_PRIVATE_KEYWORD static inline void Name##_getter(const current_class& obj) { };\
			NCPP_PRIVATE_KEYWORD reflector_wrapper_t<Type, &current_class::Name##_getter, &current_class::Name##_name_cstr> Name##_reflector;
#else
#define NCPP_PUBLIC_F(Type, Name) NCPP_PUBLIC_KEYWORD Type Name;
#endif

        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////

#define NCPP_BASE(Name) NCPP_PRIVATE_KEYWORD base_wrapper_t<Name> base##_reflector;

		////////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////

#define NCPP_ENABLE_VIRTUAL() \
			NCPP_PUBLIC_KEYWORD friend current_class& operator << (current_class&, const support_virtual_flag_type& flag) { return *reinterpret_cast<current_class*>(0); }\
			NCPP_PRIVATE_KEYWORD virtual void virtual_reflect(ncpp::rtti::rcontext& context) const { context.reflect_type_t<current_class>(); }

	}

}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



template<typename item_type__, std::enable_if_t<ncpp::rtti::is_robject_t<item_type__>, ncpp::i32> = 0>
std::ostream& operator << (
	std::ostream& os,
	const ncpp::ostream_input_t<
		item_type__
	>& input
)
{

	if (input.second > NCPP_MAX_TAB_COUNT) {

		os << ncpp::cout_lowlight("...");

		return os;
	}

	os << "\x1B[33mrobject\033[0m"
		<< ncpp::cout_lowlight("<") << ("\x1B[34m" + eastl::string(typeid(item_type__).name()) + "\033[0m").c_str() << ncpp::cout_lowlight(">")
		<< " ";
	
	os << ncpp::cout_lowlight("{") << std::endl;



	ncpp::rtti::rcontext ctx;
	ctx.reflect(input.first);



	ncpp::u32 member_count = ctx.name_to_member_map().size();



	auto member_it = ctx.name_to_member_map().begin();
	
	for (ncpp::sz i = 0; i < member_count; ++i) {

		for (ncpp::u32 j = 0; j < (input.second + 1) * NCPP_TAB_SIZE; ++j) {

			os << " ";

		}
		
		os << ncpp::cout_field_name(member_it->first) << ncpp::cout_lowlight(": ");

		member_it->second.ostream((void*)(&(input.first)), input.second + 1, os);

		if (i != member_count - 1)
			os << ncpp::cout_lowlight(",");

		os << std::endl;

		++member_it;

	}



	for (ncpp::u32 j = 0; j < (input.second) * NCPP_TAB_SIZE; ++j) {

		os << " ";

	}
	os << ncpp::cout_lowlight("}");

	return os;
}

template<typename item_type__, std::enable_if_t<ncpp::rtti::is_robject_t<item_type__>, ncpp::i32> = 0>
std::ostream& operator << (
	std::ostream& os,
	const item_type__& input
)
{

	os << ncpp::ostream_input_t<item_type__> { input, 0 };

	return os;
}