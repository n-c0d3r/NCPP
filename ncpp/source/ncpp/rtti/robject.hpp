#pragma once

/**
 *  @file ncpp/rtti/robject.hpp
 *  @brief Implements reflected object.
 */



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/prerequisites.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/utilities/.hpp>
#include <ncpp/containers/.hpp>
#include <ncpp/dop/.hpp>
#include <ncpp/pac/.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/rtti/rclass.hpp>

#pragma endregion 



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



namespace ncpp {

    namespace rtti {

        class robject_i;



        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#define NCPP_RCLASS(ClassName) \
        private:\
            using current_rclass = ClassName;\
        public:\
            virtual ncpp::rtti::rclass_t<ncpp::rtti::robject_i> get_rclass(){\
                \
                return ncpp::rtti::rclass_t<ClassName>();\
            }\
            static inline ncpp::rtti::rclass_t<ClassName> get_static_rclass() {\
                \
                return ncpp::rtti::rclass_t<ClassName>(); \
            }

#define NCPP_RCSCOPE(ClassName) \
        ncpp::rtti::robject_constructor_scope __robject_constructor_scope__(*this);

#define NCPP_RCVARIABLE(MemberType, MemberName, ...) \
        MemberType MemberName;\
        char MemberName##_name_cstr[sizeof(#MemberName)] = #MemberName;\
        using MemberName##_args_type = typename ncpp::rtti::robject_member_args_t<__VA_ARGS__>;\
        MemberName##_args_type MemberName##_args = {__VA_ARGS__}; \
        using MemberName##_reflecter_type = ncpp::rtti::robject_variable_reflecter_t<\
            current_rclass, \
            MemberType, \
            decltype(&current_rclass::MemberName##_name_cstr),\
            &current_rclass::MemberName##_name_cstr,\
            decltype(&current_rclass::MemberName##_args),\
            &current_rclass::MemberName##_args,\
            decltype(&current_rclass::MemberName),\
            &current_rclass::MemberName\
        >; \
        friend class MemberName##_reflecter_type; \
        MemberName##_reflecter_type MemberName##_reflecter;

#define NCPP_RCFUNCTION(MemberFunctionType, MemberName,...) \
        using MemberName##_type = MemberFunctionType; \
        MemberName##_type MemberName; \
        char MemberName##_name_cstr[sizeof(#MemberName)] = #MemberName;\
        typename ncpp::rtti::robject_member_args_t<__VA_ARGS__> MemberName##_args = {__VA_ARGS__}; \
        using MemberName##_reflecter_type = ncpp::rtti::robject_function_reflecter_t<\
            current_rclass, \
            MemberFunctionType, \
            decltype(&current_rclass::MemberName##_name_cstr),\
            &current_rclass::MemberName##_name_cstr,\
            decltype(&current_rclass::MemberName##_args),\
            &current_rclass::MemberName##_args,\
            decltype(&current_rclass::MemberName), \
            &current_rclass::MemberName \
        >; \
        friend class MemberName##_reflecter_type; \
        MemberName##_reflecter_type MemberName##_reflecter;



        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



        template<sz... args__>
        using robject_member_args_t = typename std::array<sz, sizeof... (args__)>;



        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



        robject_i& current_constructing_object();



        class robject_constructor_scope {

            friend class robject_i;



        private:
            utilities::lref_t<robject_i> prev_robject_ref_;
            utilities::lref_t<robject_i> target_robject_ref_;



        public:
            robject_constructor_scope(robject_i& robject_);
            inline robject_constructor_scope() :
                robject_constructor_scope(*utilities::lref_t<robject_i>())
            {



            }
            ~robject_constructor_scope();

        };



        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



        struct robject_member_handle;
        struct robject_member_handle;



        struct robject_member_handle {

            struct args_array_type {

                sz* head_arg_p = 0;
                sz arg_count = 0;

                inline const sz& head() const {

                    return *head_arg_p;
                }
                inline const sz& tail() const {

                    return *(head_arg_p + arg_count - 1);
                }
                inline const sz* begin() const {

                    return head_arg_p;
                }
                inline const sz* end() const {

                    return head_arg_p + arg_count;
                }

            };



            args_array_type args_array;
            robject_i* robject_p = 0;
            void* member_ptr_p = 0;



            inline robject_member_handle() {


            }
            inline robject_member_handle(const robject_member_handle& other) :
                args_array(other.args_array),
                robject_p(other.robject_p),
                member_ptr_p(other.member_ptr_p)
            {



            }
            inline robject_member_handle& operator = (const robject_member_handle& other) {

                args_array = other.args_array;
                robject_p = other.robject_p;
                member_ptr_p = other.member_ptr_p;

                return *this;
            }



            template<typename type__>
            using recorrected_type_t = typename utilities::nth_template_arg_t<
                utilities::is_function_t<type__>::value,
                type__,
                typename std::function<type__>
            >::type;



            template<typename type__>
            inline recorrected_type_t<type__>& to_t() {

                return *reinterpret_cast<recorrected_type_t<type__>*>(member_ptr_p);
            }

            template<typename type__>
            inline recorrected_type_t<const type__>& to_t() const {

                return *reinterpret_cast<recorrected_type_t<const type__>*>(member_ptr_p);
            }



            template<typename type__>
            inline robject_member_handle& operator = (type__&& other) {

                *((std::remove_reference<type__>::type*)member_ptr_p) = std::forward<type__>(other);

                return *this;
            }

        };



        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



        template<
            class object_type__,
            typename variable_type__,
            typename name_member_ptr_type,
            name_member_ptr_type name_member_ptr,
            typename args_member_ptr_type,
            args_member_ptr_type args_member_ptr,
            typename member_ptr_type,
            member_ptr_type member_ptr
        >
        class robject_variable_reflecter_t
        {

        public:
            robject_variable_reflecter_t();
            ~robject_variable_reflecter_t();

        };



        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



        template<
            class object_type__,
            typename function_type__,
            typename name_member_ptr_type,
            name_member_ptr_type name_member_ptr,
            typename args_member_ptr_type,
            args_member_ptr_type args_member_ptr,
            typename member_ptr_type,
            member_ptr_type member_ptr
        >
        class robject_function_reflecter_t
        {

        public:
            typedef void* executer_type;



        public:
            robject_function_reflecter_t();
            ~robject_function_reflecter_t();

            template<b8 is_void_return__>
            struct executer_get_t;

        };



        template<
            class object_type__,
            typename function_type__,
            b8 is_void_return__,
            typename name_member_ptr_type,
            name_member_ptr_type name_member_ptr,
            typename args_member_ptr_type,
            args_member_ptr_type args_member_ptr,
            typename member_ptr_type,
            member_ptr_type member_ptr
        >
        struct robject_function_reflecter_executer_get_t {

        };



        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





        /**
         *  Reflected object interface.
         */
        class robject_i {

            NCPP_RCLASS(robject_i);

            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////

        public:
            using name_to_member_handle_map_type = typename containers::native_unordered_map_t<containers::native_string, robject_member_handle>;

            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////

        private:
            name_to_member_handle_map_type name_to_member_handle_map_;
            robject_constructor_scope constructor_scope_;

        public:
            NCPP_RCVARIABLE(
                containers::native_string, name
            );

			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////

#pragma region Constructors, Destructor and Operators
		public:
            robject_i();
            virtual ~robject_i();

            inline robject_member_handle& operator [] (const containers::native_string& member_name) {

                if (name_to_member_handle_map_.find(member_name) != name_to_member_handle_map_.end())
                    return name_to_member_handle_map_.find(member_name)->second;

                return *utilities::lref_t<robject_member_handle>();
            }
            inline const robject_member_handle& operator [] (const containers::native_string& member_name) const {

                if (name_to_member_handle_map_.find(member_name) != name_to_member_handle_map_.end())
                    return name_to_member_handle_map_.find(member_name)->second;

                return *utilities::lref_t<const robject_member_handle>();
            }
#pragma endregion

			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////

#pragma region Methods
		public:
            inline b8 is_has_member(const containers::native_string& member_name) {

                if (name_to_member_handle_map_.find(member_name) != name_to_member_handle_map_.end())
                    return true;

                return false;
            }

            inline void add_member_handle(const containers::native_string& member_name, const robject_member_handle& handle) {

                assert(!is_has_member(member_name) && "member already existed");

                name_to_member_handle_map_[member_name] = handle;

            }

            template<typename variable_type__>
            inline variable_type__& var_t(const containers::native_string& var_name) {

                return var_handle(var_name).get_t<variable_type__>();
            }

            template<typename function_type__>
            inline std::function<function_type__>& func_t(const containers::native_string& func_name) {

                return func_handle(func_name).get_t<function_type__>();
            }
#pragma endregion

        };




        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



        template<
            class object_type__,
            typename variable_type__,
            typename name_member_ptr_type,
            name_member_ptr_type name_member_ptr,
            typename args_member_ptr_type,
            args_member_ptr_type args_member_ptr,
            typename member_ptr_type,
            member_ptr_type member_ptr
        >
        robject_variable_reflecter_t<
            object_type__,
            variable_type__,
            name_member_ptr_type,
            name_member_ptr,
            args_member_ptr_type,
            args_member_ptr,
            member_ptr_type,
            member_ptr
        >::robject_variable_reflecter_t() {

            object_type__& robj = (object_type__&)current_constructing_object();

            robject_member_handle rvar_handle;
            rvar_handle.args_array = {
                (robj.*args_member_ptr).data(),
                (robj.*args_member_ptr).size()
            };
            rvar_handle.robject_p = &robj;
            rvar_handle.member_ptr_p = &(robj.*member_ptr);

            robj.add_member_handle(robj.*name_member_ptr, rvar_handle);

        }

        template<
            class object_type__,
            typename variable_type__,
            typename name_member_ptr_type,
            name_member_ptr_type name_member_ptr,
            typename args_member_ptr_type,
            args_member_ptr_type args_member_ptr,
            typename member_ptr_type,
            member_ptr_type member_ptr
        >
        robject_variable_reflecter_t<
            object_type__,
            variable_type__,
            name_member_ptr_type,
            name_member_ptr,
            args_member_ptr_type,
            args_member_ptr,
            member_ptr_type,
            member_ptr
        >::~robject_variable_reflecter_t() {



        }



        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



        template<
            class object_type__,
            typename function_type__,
            typename name_member_ptr_type,
            name_member_ptr_type name_member_ptr,
            typename args_member_ptr_type,
            args_member_ptr_type args_member_ptr,
            typename member_ptr_type,
            member_ptr_type member_ptr
        >
        robject_function_reflecter_t<
            object_type__,
            function_type__,
            name_member_ptr_type,
            name_member_ptr,
            args_member_ptr_type,
            args_member_ptr,
            member_ptr_type,
            member_ptr
        >::robject_function_reflecter_t(){

            object_type__& robj = (object_type__&)current_constructing_object();

            using function_traits = typename utilities::function_traits_t<function_type__>;

            using executer_getter_type = typename robject_function_reflecter_executer_get_t<
                object_type__,
                function_type__,
                std::is_same_v<function_traits::result_type, void>,
                name_member_ptr_type,
                name_member_ptr,
                args_member_ptr_type,
                args_member_ptr,
                member_ptr_type,
                member_ptr
            >;
                        
            executer_type rfunc_executer = executer_getter_type::get(robj);

            robject_member_handle rfunc_handle;
            rfunc_handle.args_array = {
                (robj.*args_member_ptr).data(),
                (robj.*args_member_ptr).size()
            };
            rfunc_handle.robject_p = &robj;
            rfunc_handle.member_ptr_p = reinterpret_cast<void*>(rfunc_executer);

            robj.add_member_handle(robj.*name_member_ptr, rfunc_handle);

        }

        template<
            class object_type__,
            typename function_type__,
            typename name_member_ptr_type,
            name_member_ptr_type name_member_ptr,
            typename args_member_ptr_type,
            args_member_ptr_type args_member_ptr,
            typename member_ptr_type,
            member_ptr_type member_ptr
        >
        robject_function_reflecter_t<
            object_type__,
            function_type__,
            name_member_ptr_type,
            name_member_ptr,
            args_member_ptr_type,
            args_member_ptr,
            member_ptr_type,
            member_ptr
        >::~robject_function_reflecter_t() {



        }

        template<
            class object_type__,
            typename function_type__,
            typename name_member_ptr_type,
            name_member_ptr_type name_member_ptr,
            typename args_member_ptr_type,
            args_member_ptr_type args_member_ptr,
            typename member_ptr_type,
            member_ptr_type member_ptr
        >
        struct robject_function_reflecter_executer_get_t <
            object_type__,
            function_type__,
            true,
            name_member_ptr_type,
            name_member_ptr,
            args_member_ptr_type,
            args_member_ptr,
            member_ptr_type,
            member_ptr
        >
        {

            using executer_type = typename robject_function_reflecter_t<
                object_type__,
                function_type__,
                name_member_ptr_type,
                name_member_ptr,
                args_member_ptr_type,
                args_member_ptr,
                member_ptr_type,
                member_ptr
            >::executer_type;

            using function_traits = typename utilities::function_traits_t<function_type__>;

            static inline executer_type get(object_type__& robj) {

                static std::function<function_type__> func_s = [&robj](auto&&... args) -> function_traits::result_type {

                    (robj.*member_ptr)(std::forward<decltype(args)>(args)...);

                };

                return &func_s;
            }

        };

        template<
            class object_type__,
            typename function_type__,
            typename name_member_ptr_type,
            name_member_ptr_type name_member_ptr,
            typename args_member_ptr_type,
            args_member_ptr_type args_member_ptr,
            typename member_ptr_type,
            member_ptr_type member_ptr
        >
        struct robject_function_reflecter_executer_get_t <
            object_type__,
            function_type__,
            false,
            name_member_ptr_type,
            name_member_ptr,
            args_member_ptr_type,
            args_member_ptr,
            member_ptr_type,
            member_ptr
        >
        {

            using executer_type = typename robject_function_reflecter_t<
                object_type__,
                function_type__,
                name_member_ptr_type,
                name_member_ptr,
                args_member_ptr_type,
                args_member_ptr,
                member_ptr_type,
                member_ptr
            >::executer_type;

            using function_traits = typename utilities::function_traits_t<function_type__>;

            static inline executer_type get(object_type__& robj) {

                static std::function<function_type__> func_s = [&robj](auto&&... args) -> function_traits::result_type {

                    return (robj.*member_ptr)(std::forward<decltype(args)>(args)...);

                };

                return &func_s;
            }

        };


        /*
        template<typename item_type__>
        std::ostream& operator << (std::ostream& os, const robject_i& obj)
        {

            os << "{" << std::endl;

            for (sz i = 0; i < v.size(); ++i) {

                os << "    " << v[i];

                if (i != v.size() - 1)
                    os << ",";

                os << std::endl;

            }

            os << "}" << std::endl;

            return os;
        }*/

    }

}