#pragma once

/**
 *  @file ncpp/rtti/robject.hpp
 *  @brief Implements reflected object.
 */



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/prerequisites.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/utilities/.hpp>
#include <ncpp/containers/.hpp>
#include <ncpp/dop/.hpp>
#include <ncpp/pac/.hpp>

#pragma endregion 



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



namespace ncpp {

    namespace rtti {

        class robject_i;



        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#define NCPP_RCLASS(ClassName) \
        private:\
            using current_rclass = ClassName;

#define NCPP_RCVARIABLE(MemberType, MemberName) \
        MemberType MemberName;\
        char MemberName##_name_cstr[sizeof(#MemberName)] = #MemberName;\
        using MemberName##_reflecter_type = ncpp::rtti::robject_variable_reflecter_t<\
            current_rclass, \
            MemberType, \
            decltype(&current_rclass::MemberName##_name_cstr),\
            &current_rclass::MemberName##_name_cstr,\
            decltype(&current_rclass::MemberName),\
            &current_rclass::MemberName\
        >; \
        friend class MemberName##_reflecter_type; \
        MemberName##_reflecter_type MemberName##_reflecter;

#define NCPP_RCFUNCTION(MemberReturnType, MemberName, MemberArgTypes,...) \
        MemberReturnType MemberName(MemberArgTypes); \
        char MemberName##_name_cstr[sizeof(#MemberName)] = #MemberName;\
        using MemberName##_reflecter_type = ncpp::rtti::robject_function_reflecter_t<\
            current_rclass, \
            MemberReturnType, \
            decltype(&current_rclass::MemberName##_name_cstr),\
            &current_rclass::MemberName##_name_cstr,\
            decltype(&current_rclass::MemberName), \
            &current_rclass::MemberName, \
            MemberArgTypes\
        >; \
        friend class MemberName##_reflecter_type; \
        MemberName##_reflecter_type MemberName##_reflecter;

#define NCPP_REFLECT_CLASS(ClassName) \
        ncpp::rtti::robject_constructor_scope __robject_constructor_scope__(*this);



        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



        robject_i& current_constructing_object();



        class robject_constructor_scope {

            friend class robject_i;



        private:
            utilities::lref_t<robject_i> prev_robject_ref_;
            utilities::lref_t<robject_i> target_robject_ref_;



        public:
            robject_constructor_scope(robject_i& robject_);
            inline robject_constructor_scope() :
                robject_constructor_scope(*utilities::lref_t<robject_i>())
            {



            }
            ~robject_constructor_scope();

        };



        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



        class robject_variable {

        private:
            void* object_p_;
            void* var_p_;



        public:
            robject_variable() :
                object_p_(0),
                var_p_(0)
            {}
            robject_variable(void* object_p, void* var_p) :
                object_p_(object_p),
                var_p_(var_p)
            {



            }
            ~robject_variable() {



            }

            template<typename type__>
            type__& get_t() {

                return *((type__*)var_p_);
            }

            template<typename type__, typename target_type>
            void set_t(target_type target) {

                *((type__*)var_p_) = std::forward<target_type>(target);
            }

        };



        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



        struct robject_function_handle {

            using rfunc_executer_type = void*;

            robject_i* robject_p = 0;
            rfunc_executer_type rfunc_executer;

            template<typename function_type__>
            inline std::function<function_type__>& get_t() {

                using func_ptr_type = std::function<function_type__>*;

                return *reinterpret_cast<func_ptr_type>(rfunc_executer);
            }

        };



        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



        template<
            class object_type__,
            typename variable_type__,
            typename name_member_ptr_type,
            name_member_ptr_type name_member_ptr,
            typename member_ptr_type,
            member_ptr_type member_ptr
        >
        class robject_variable_reflecter_t
        {

        public:
            robject_variable_reflecter_t();
            ~robject_variable_reflecter_t();

        };



        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



        template<
            class object_type__,
            typename return_type__,
            typename name_member_ptr_type,
            name_member_ptr_type name_member_ptr,
            typename member_ptr_type,
            member_ptr_type member_ptr,
            typename... arg_types
        >
        class robject_function_reflecter_t
        {

        public:
            typedef void* executer_type;



        public:
            robject_function_reflecter_t();
            ~robject_function_reflecter_t();

            template<b8 is_void_return__>
            struct executer_get_t;

        };



        template<
            class object_type__,
            typename return_type__,
            b8 is_void_return__,
            typename name_member_ptr_type,
            name_member_ptr_type name_member_ptr,
            typename member_ptr_type,
            member_ptr_type member_ptr,
            typename... arg_types
        >
        struct robject_function_reflecter_executer_get_t {

        };



        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





        /**
         *  Reflected object interface.
         */
        class robject_i {

            NCPP_RCLASS(robject_i);

            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////

        public:
            using name_to_variable_map_type = typename containers::native_unordered_map_t<containers::native_string, robject_variable>;
            using name_to_function_handle_map_type = typename containers::native_unordered_map_t<containers::native_string, robject_function_handle>;

            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////

        private:
            name_to_variable_map_type name_to_variable_map_;
            name_to_function_handle_map_type name_to_function_handle_map_;
            robject_constructor_scope constructor_scope_;

        public:
            NCPP_RCVARIABLE(containers::native_string, name);

			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////

#pragma region Constructors, Destructor and Operators
		public:
            robject_i();
            ~robject_i();
#pragma endregion

			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////

#pragma region Methods
		public:
            inline void add_rvariable(const containers::native_string& var_name, const robject_variable& var) {

                name_to_variable_map_[var_name] = var;

            }
            inline const robject_variable& get_rvariable(const containers::native_string& var_name) {

                return name_to_variable_map_[var_name];
            }

            inline void add_rfunction_handle(const containers::native_string& func_name, robject_function_handle func_handle) {

                name_to_function_handle_map_[func_name] = func_handle;

            }
            inline robject_function_handle get_rfunction_handle(const containers::native_string& func_name) {

                return name_to_function_handle_map_[func_name];
            }
            template<typename function_type__>
            inline std::function<function_type__>& get_rfunction(const containers::native_string& func_name) {

                return get_rfunction_handle(func_name).get_t<function_type__>();
            }
#pragma endregion

        };




        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



        template<
            class object_type__,
            typename variable_type__,
            typename name_member_ptr_type,
            name_member_ptr_type name_member_ptr,
            typename member_ptr_type,
            member_ptr_type member_ptr
        >
        robject_variable_reflecter_t<
            object_type__,
            variable_type__,
            name_member_ptr_type,
            name_member_ptr,
            member_ptr_type,
            member_ptr
        >::robject_variable_reflecter_t() {

            object_type__& robj = (object_type__&)current_constructing_object();

            robject_variable var(&robj, &(robj.*member_ptr));

            robj.add_rvariable(robj.*name_member_ptr, var);

        }

        template<
            class object_type__,
            typename variable_type__,
            typename name_member_ptr_type,
            name_member_ptr_type name_member_ptr,
            typename member_ptr_type,
            member_ptr_type member_ptr
        >
        robject_variable_reflecter_t<
            object_type__,
            variable_type__,
            name_member_ptr_type,
            name_member_ptr,
            member_ptr_type,
            member_ptr
        >::~robject_variable_reflecter_t() {



        }



        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



        template<
            class object_type__,
            typename return_type__,
            typename name_member_ptr_type,
            name_member_ptr_type name_member_ptr,
            typename member_ptr_type,
            member_ptr_type member_ptr,
            typename... arg_types
        >
        robject_function_reflecter_t<
            object_type__,
            return_type__,
            name_member_ptr_type,
            name_member_ptr,
            member_ptr_type,
            member_ptr,
            arg_types...
        >::robject_function_reflecter_t(){

            object_type__& robj = (object_type__&)current_constructing_object();

            using executer_getter_type = typename robject_function_reflecter_executer_get_t<
                object_type__,
                return_type__,
                std::is_same_v<return_type__, void>,
                name_member_ptr_type,
                name_member_ptr,
                member_ptr_type,
                member_ptr,
                arg_types...
            >;
                        
            executer_type rfunc_executer = executer_getter_type::get(robj);

            robject_function_handle rfunc_handle { 
                &robj, 
                reinterpret_cast<robject_function_handle::rfunc_executer_type>(rfunc_executer)
            };

            robj.add_rfunction_handle(robj.*name_member_ptr, rfunc_handle);

        }

        template<
            class object_type__,
            typename return_type__,
            typename name_member_ptr_type,
            name_member_ptr_type name_member_ptr,
            typename member_ptr_type,
            member_ptr_type member_ptr,
            typename... arg_types
        >
        robject_function_reflecter_t<
            object_type__,
            return_type__,
            name_member_ptr_type,
            name_member_ptr,
            member_ptr_type,
            member_ptr,
            arg_types...
        >::~robject_function_reflecter_t() {



        }

        template<
            class object_type__,
            typename return_type__,
            typename name_member_ptr_type,
            name_member_ptr_type name_member_ptr,
            typename member_ptr_type,
            member_ptr_type member_ptr,
            typename... arg_types
        >
        struct robject_function_reflecter_executer_get_t <
            object_type__,
            return_type__,
            true,
            name_member_ptr_type,
            name_member_ptr,
            member_ptr_type,
            member_ptr,
            arg_types...
        >
        {

            using executer_type = typename robject_function_reflecter_t<
                object_type__,
                return_type__,
                name_member_ptr_type,
                name_member_ptr,
                member_ptr_type,
                member_ptr,
                arg_types...
            >::executer_type;

            static inline executer_type get(object_type__& robj) {

                static std::function<return_type__(arg_types... args)> func_s = [&robj](arg_types... args)->return_type__ {

                    (robj.*member_ptr)(std::forward<arg_types>(args)...);

                };

                return &func_s;
            }

        };

        template<
            class object_type__,
            typename return_type__,
            typename name_member_ptr_type,
            name_member_ptr_type name_member_ptr,
            typename member_ptr_type,
            member_ptr_type member_ptr,
            typename... arg_types
        >
        struct robject_function_reflecter_executer_get_t <
            object_type__,
            return_type__,
            false,
            name_member_ptr_type,
            name_member_ptr,
            member_ptr_type,
            member_ptr,
            arg_types...
        >
        {

            using executer_type = typename robject_function_reflecter_t<
                object_type__,
                return_type__,
                name_member_ptr_type,
                name_member_ptr,
                member_ptr_type,
                member_ptr,
                arg_types...
            >::executer_type;

            static inline executer_type get(object_type__& robj) {

                static std::function<return_type__(arg_types... args)> func_s = [&robj](arg_types... args)->return_type__ {

                    return (robj.*member_ptr)(std::forward<arg_types>(args)...);

                };

                return &func_s;
            }

        };

    }

}