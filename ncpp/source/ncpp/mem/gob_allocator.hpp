#pragma once

/** @file ncpp/mem/clusafi_allocator.hpp
*	@brief Implements clusafi allocator.
*/



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/prerequisites.hpp>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/containers/ring_buffer.hpp>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/mem/allocator.hpp>
#include <ncpp/mem/default_allocator.hpp>
#include <ncpp/containers/eastl_containers.hpp>

#pragma endregion



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



namespace ncpp {

    namespace mem {

        struct NCPP_ALIGN(EASTL_ALLOCATOR_MIN_ALIGNMENT) F_gob_chunk_header {

        };

        struct NCPP_ALIGN(EASTL_ALLOCATOR_MIN_ALIGNMENT) F_gob_deallocation_desc {

        };



        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



        struct F_default_gob_options {

            static constexpr u32 level_count = NCPP_DEFAULT_GOB_LEVEL_COUNT;

            using F_deallocation_desc_queue = containers::TF_queue<F_gob_deallocation_desc>;

        };



        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



        template<class F_options__ = F_default_gob_options>
        class TF_gob_storage;

        template<class F_options__ = F_default_gob_options>
        class TF_gob_deallocation_list;

        template<class F_options__ = F_default_gob_options>
        class TF_gob_allocator;



        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



        template<class F_options__>
        class TF_gob_storage {

        public:
            using F_options = F_options__;
            using F_storage = TF_gob_storage<F_options>;
            using F_deallocation_list = TF_gob_deallocation_list<F_options>;
            using F_allocator = TF_gob_allocator<F_options>;



        private:
            u32 leaf_node_size_ = NCPP_DEFAULT_GOB_LEAF_NODE_SIZE;
            u32 leaf_node_size_log2_ = 0;
            u32 max_leaf_node_count_ = 0;

        public:
            NCPP_FORCE_INLINE u32 leaf_node_size() const noexcept { return leaf_node_size_; }
            NCPP_FORCE_INLINE u32 leaf_node_size_log2() const noexcept { return leaf_node_size_log2_; }
            NCPP_FORCE_INLINE u32 max_leaf_node_count() const noexcept { return max_leaf_node_count_; }



        public:
            inline TF_gob_storage(
                u32 leaf_node_size = NCPP_DEFAULT_GOB_LEAF_NODE_SIZE
            ) :
                leaf_node_size_(leaf_node_size),
                leaf_node_size_log2_(utilities::uint_bitscan_reverse_32(leaf_node_size)),
                max_leaf_node_count_(1 << (F_options::level_count - 1))
            {

                NCPP_ASSERT((leaf_node_size & (leaf_node_size - 1)) == 0) << "object min size must be power of 2";

            }
            ~TF_gob_storage(){
            }



        public:
            NCPP_FORCE_INLINE u32 find_level_index_from_log2(u32 log2) const noexcept {

                return (log2 < leaf_node_size_log2_) ? 0 : (log2 - leaf_node_size_log2_);
            }
            NCPP_FORCE_INLINE u32 find_level_index_lower(u32 rounded_size) const noexcept {

                return find_level_index_from_log2(
                    utilities::uint_bitscan_reverse_32(rounded_size)
                );
            }
            NCPP_FORCE_INLINE u32 find_level_index_upper(u32 rounded_size) const noexcept {

                return find_level_index_from_log2(
                    utilities::uint_bitscan_reverse_32(rounded_size) + 1
                );
            }

        };



        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



        template<class F_options__>
        class TF_gob_deallocation_list {

        public:
            using F_options = F_options__;
            using F_storage = TF_gob_storage<F_options>;
            using F_deallocation_list = TF_gob_deallocation_list<F_options>;
            using F_allocator = TF_gob_allocator<F_options>;

            using F_deallocation_desc_queue = typename F_options::F_deallocation_desc_queue;



        public:
            template<class F_options2__>
            friend class TF_gob_storage;



        private:
            u32 min_capacity_ = 0;

            F_deallocation_desc_queue deallocation_desc_queue_;

        public:
            NCPP_FORCE_INLINE u32 min_capacity() const noexcept { return min_capacity_; }



        public:
            inline TF_gob_deallocation_list(
                u32 min_capacity
            ) :
                min_capacity_(min_capacity)
            {
                deallocation_desc_queue_.get_container().set_capacity(min_capacity);
            }
            ~TF_gob_deallocation_list(){
            }

        };



        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



        template<class F_options__>
        class TF_gob_allocator : public TA_allocator<TF_gob_allocator<F_options__>, true> {

        private:
            using F_base = TA_allocator<TF_gob_allocator<F_options__>, true>;



        public:
            using F_options = F_options__;
            using F_storage = TF_gob_storage<F_options>;
            using F_deallocation_list = TF_gob_deallocation_list<F_options>;
            using F_allocator = TF_gob_allocator<F_options>;



        private:
            F_storage* storage_p_ = 0;
            F_deallocation_list* deallocation_list_ = 0;

        public:
            NCPP_FORCE_INLINE F_storage* storage_p() noexcept { return storage_p_; }
            NCPP_FORCE_INLINE const F_storage* storage_p() const noexcept { return storage_p_; }
            NCPP_FORCE_INLINE F_deallocation_list* deallocation_list() noexcept { return deallocation_list_; }
            NCPP_FORCE_INLINE const F_deallocation_list* deallocation_list() const noexcept { return deallocation_list_; }



        public:
            inline TF_gob_allocator(F_storage* storage_p, F_deallocation_list* deallocation_list) :
                storage_p_(storage_p),
                deallocation_list_(deallocation_list)
            {

            }
            ~TF_gob_allocator(){

            }

        };



        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



        using F_gob_storage = TF_gob_storage<>;
        using F_gob_deallocation_list = TF_gob_deallocation_list<>;
        using F_gob_allocator = TF_gob_allocator<>;

    }

}

