#pragma once

/** @file ncpp/mem/memory_storage.hpp
*	@brief Implements memory storage base class template.
*/



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/prerequisites.hpp>
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/mem/allocator.hpp>
#include <ncpp/mem/crt_allocator.hpp>
#include <ncpp/mem/memory_provider.hpp>

#pragma endregion



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



namespace ncpp {

    namespace mem {

        template<class F_memory_storage__, class F_memory_provider__>
        class TA_memory_storage {

        private:
            using F_this = TA_memory_storage<F_memory_storage__, F_memory_provider__>;

        public:
            using F_memory_storage = F_memory_storage__;
            using F_memory_provider = F_memory_provider__;

        public:
            using F_memory_block = typename TF_memory_provider_safe_infos<F_memory_provider>::F_memory_block;
            using F_memory_provider_desc = typename TF_memory_provider_safe_infos<F_memory_provider>::F_memory_provider_desc;
            using F_memory_provider_management_params = typename TF_memory_provider_safe_infos<F_memory_provider>::F_memory_provider_management_params;

            using F_child_memory_block = typename TF_memory_provider_safe_infos<F_memory_provider>::F_child_memory_block;



        private:
            utilities::TF_mem_wrap<F_memory_provider> provider_mem_wrap_;
            NCPP_ENABLE_IF_DEBUG(b8 is_provider_initialized_ = false);

        public:
            NCPP_FORCE_INLINE F_memory_provider& provider() noexcept { return provider_mem_wrap_.get(); }
            NCPP_FORCE_INLINE const F_memory_provider& provider() const noexcept { return provider_mem_wrap_.get(); }



        protected:
            NCPP_FORCE_INLINE TA_memory_storage()
            {
            }

        public:
            virtual ~TA_memory_storage() {

                NCPP_ENABLE_IF_DEBUG(
                    NCPP_ASSERT(is_provider_initialized_) << "provider is not initialized"
                );

                provider_mem_wrap_.destruct();
            }

            NCPP_FORCE_INLINE TA_memory_storage(const TA_memory_storage& x) = delete;
            NCPP_FORCE_INLINE TA_memory_storage(TA_memory_storage&& x) = delete;

            NCPP_FORCE_INLINE TA_memory_storage& operator=(const TA_memory_storage& x) = delete;
            NCPP_FORCE_INLINE TA_memory_storage& operator=(TA_memory_storage&& x) = delete;



        public:
            NCPP_FORCE_INLINE b8 operator==(const TA_memory_storage& x) const noexcept {

                return (this == &x);
            }



        protected:
            void init_provider(const F_memory_provider_desc& provider_desc) {

                provider_mem_wrap_.construct(provider_desc);

                NCPP_ENABLE_IF_DEBUG(is_provider_initialized_ = true);
            }



        public:
            F_memory_block* pop_block();
            void push_block(F_memory_block*);

        };

    }

}

