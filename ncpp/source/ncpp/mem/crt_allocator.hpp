#pragma once

/** @file ncpp/mem/crt_allocator.hpp
*	@brief Implements crt allocator.
*/



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/prerequisites.hpp>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/mem/allocator.hpp>

#pragma endregion



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



namespace ncpp {

	namespace mem {

		/**
		 *	An allocator using malloc and free.
		 */
		template<b8 auto_count_non_default_allocations__ = true>
		class TF_crt_allocator : public TA_allocator<
				TF_crt_allocator<auto_count_non_default_allocations__>,
				false,
				auto_count_non_default_allocations__
			>
		{
		private:
			using F_this = TF_crt_allocator<auto_count_non_default_allocations__>;



		public:
			NCPP_FORCE_INLINE TF_crt_allocator(const char* name = 0) :
                TA_allocator<
                	F_this,
					false,
					auto_count_non_default_allocations__
				>(name)
			{}
			NCPP_FORCE_INLINE TF_crt_allocator(const TF_crt_allocator& x) :
				TA_allocator<
					F_this,
					false,
					auto_count_non_default_allocations__
				>()
			{}
			~TF_crt_allocator()
			{}



		public:
			constexpr b8 operator == (const TF_crt_allocator& x) const noexcept {

				return true;
			}

		};

		/**
		 *	Default crt allocator.
		 */
		using F_crt_allocator = TF_crt_allocator<>;

		/**
		 *	Crt allocator that does not automatically count non-default allocations.
		 */
		using F_heap_crt_allocator = TF_crt_allocator<false>;

	}

}

