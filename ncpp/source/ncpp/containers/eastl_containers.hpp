#pragma once

/** @file ncpp/containers/eastl_containers.hpp
*	@brief Typedefs eastl containers with ncpp's default allocator.
*/



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/prerequisites.hpp>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/mem/default_allocator.hpp>

#pragma endregion



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



namespace ncpp {

	namespace containers {
        
        template<typename F_type__>
        using TF_eastl_vector = eastl::vector<F_type__, mem::F_default_allocator>;

        template<typename F_type__>
        using TF_eastl_list = eastl::list<F_type__, mem::F_default_allocator>;

        template<typename F_type__>
        using TF_eastl_shared_ptr = eastl::shared_ptr<F_type__>;

        template<typename F_type__>
        using TF_eastl_deque = eastl::deque<F_type__, mem::F_default_allocator>;

        template<typename F_type__, typename F_compare__ = eastl::less<F_type__>>
        using TF_eastl_set = eastl::set<F_type__, F_compare__, mem::F_default_allocator>;

        template<typename F_key__, typename F_value__, typename F_compare__ = eastl::less<F_key__>>
        using TF_eastl_map = eastl::map<F_key__, F_value__, F_compare__, mem::F_default_allocator>;

        template<typename F_type__, typename F_hash__ = eastl::hash<F_type__>, typename F_predicate__ = eastl::equal_to<F_type__>>
        using TF_eastl_unordered_set = eastl::unordered_set<F_type__, F_hash__, F_predicate__, mem::F_default_allocator>;

        template<typename F_key__, typename F_value__, typename F_hash__ = eastl::hash<F_key__>, typename F_predicate__ = eastl::equal_to<F_key__>>
        using TF_eastl_unordered_map = eastl::unordered_map<F_key__, F_value__, F_hash__, F_predicate__, mem::F_default_allocator>;

        template<typename F_type__>
        using TF_eastl_queue = eastl::queue<F_type__, TF_eastl_deque<F_type__>>;

        template<typename F_type__>
        using TF_eastl_stack = eastl::stack<F_type__, TF_eastl_vector<F_type__>>;

    }

}
