#pragma once

/**
 *  @file ncpp/containers/array_queue.hpp
 *  @brief Implements array queue.
 */



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/prerequisites.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/utilities/.hpp>

#pragma endregion



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



namespace ncpp {

    namespace containers {



        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



        /**
         *  A array_queue_t is a queue storing elements inside an array
         */
        template<typename item_type__, sz capacity__>
        class NCPP_DEFAULT_ALIGNAS array_queue_t {

            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////

#pragma region Typedefs
        public:
            using item_type = item_type__;
            using item_array_type = std::array<item_type__, capacity__>;
            using iterator = item_type__*;
            using const_iterator = const item_type__*;

            template<sz new_capacity__>
            using rebind_capacity_t = array_queue_t<item_type__, new_capacity__>;
#pragma endregion

            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////

#pragma region Properties
        public:
            static constexpr i32 capacity() { return capacity__; };



        private:
            item_array_type item_array_;
            sz begin_index_;
            sz end_index_;
#pragma endregion

            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////

#pragma region Getters and Setters
        public:
            inline iterator begin() { return item_array_.data() + begin_index_ % capacity; }
            inline const_iterator begin() const { return item_array_.data() + begin_index_ % capacity; }
            inline const_iterator cbegin() const { return item_array_.data() + begin_index_ % capacity; }
            inline iterator end() { return item_array_.data() + end_index_ % capacity; }
            inline const_iterator end() const { return item_array_.data() + end_index_ % capacity; }
            inline const_iterator cend() const { return item_array_.data() + end_index_ % capacity; }

            inline item_type__& front() { return *begin(); }
            inline const item_type__& front() const { return *begin(); }
            inline item_type__& back() { return *(item_array_.data() + (end_index_ - 1) % capacity); }
            inline const item_type__& back() const { return *(item_array_.data() + (end_index_ - 1) % capacity); }

            inline sz size() const { return end_index_ - begin_index_; }
#pragma endregion

            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////

#pragma region Constructors, Destructor and Operators
        public:
            /**
             *  Default constructor
             */
            inline explicit array_queue_t() :
                begin_index_(0),
                end_index_(0)
            {



            }
            /**
             *  Destructor
             */
            ~array_queue_t() {



            }

            /**
             *  Copy constructor
             */
            inline array_queue_t(const array_queue_t& other)
            {

                item_array_ = other.item_array_;
                begin_index_ = other.begin_index_;
                end_index_ = other.end_index_;

            }
            /**
             *  Copy operator
             */
            inline array_queue_t& operator = (const array_queue_t& other) {

                item_array_ = other.item_array_;
                begin_index_ = other.begin_index_;
                end_index_ = other.end_index_;

                return *this;
            }

            /**
             *  Move constructor
             */
            inline array_queue_t(array_queue_t&& other)
            {

                item_array_ = other.item_array_;
                begin_index_ = other.begin_index_;
                end_index_ = other.end_index_;
                other.clear();

            }
            /**
             *  Move operator
             */
            inline array_queue_t& operator = (array_queue_t&& other) {

                item_array_ = other.item_array_;
                begin_index_ = other.begin_index_;
                end_index_ = other.end_index_;
                other.clear();

                return *this;
            }

#pragma endregion

            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////

#pragma region Methods
        private:
            template<typename item_param_type>
            inline void push_main_t(item_param_type&& item) {

                assert(size() < capacity());

                item_array_[end_index_ % capacity] = std::forward<item_param_type>(item);

                ++end_index_;
            }

            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////
        
        public:
            /**
             *  Clears the queue by resetting the end index and the begin index.
             */
            inline void clear() {

                begin_index_ = 0;
                end_index_ = 0;

            }

            /**
             *  Pushes an item into the stack by move operation
             */
            inline void push(item_type__&& item) {

                push_main_t(std::forward<item_type__>(item));
            }
            /**
             *  Pushes an item into the stack by copy operation
             */
            inline void push(const item_type__& item) {

                push_main_t(item);
            }
            /**
             *  Pops the front element
             */
            inline bool try_pop(item_type__& output) {

                if (begin_index_ == end_index_)
                    return false;

                output = item_array_[begin_index_ % capacity];

                ++begin_index_;
                     
                return true;
            }
            /**
             *  Pops the front element
             */
            inline bool try_pop() {

                if (begin_index_ == end_index_)
                    return false;

                ++begin_index_;

                return true;
            }
            /**
             *  Pops the front element
             */
            inline void pop() {

                assert(size() > 0);

                ++begin_index_;
            }

            /**
             *  Resizes the queue.
             */
            inline void resize(sz size) {

                end_index_ = begin_index_ + size;

            }
#pragma endregion

        };

    }

}