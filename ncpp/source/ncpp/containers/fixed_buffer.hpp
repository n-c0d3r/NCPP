#pragma once

/**
 *  @file ncpp/containers/fixed_buffer.hpp
 *  @brief Implements fixed_buffer.
 */



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/prerequisites.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/utilities/.hpp>

#pragma endregion



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



namespace ncpp {

    namespace containers {



        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



        /**
         *  A fixed buffer containing raw static memory block allocated by on the program stack 
         */
        template<sz capacity__>
        class NCPP_DEFAULT_ALIGNAS fixed_buffer_t {

            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////

#pragma region Typedefs
        public:
            using iterator = u8*;
            using const_iterator = const u8*;

            template<sz new_capacity__>
            using rebind_capacity_t = fixed_buffer_t<new_capacity__>;
#pragma endregion

            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////

#pragma region Properties
        public:
            static constexpr i32 capacity() { return capacity__; };



        private:
            u8 data_p_[capacity()];
#pragma endregion

            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////

#pragma region Getters and Setters
        public:
            inline iterator begin() { return data_p_; }
            inline const_iterator begin() const { return data_p_; }
            inline const_iterator cbegin() const { return data_p_; }
            inline iterator end() { return data_p_ + capacity(); }
            inline const_iterator end() const { return data_p_ + capacity(); }
            inline const_iterator cend() const { return data_p_ + capacity(); }

            inline iterator data_p() const { return data_p_; }
#pragma endregion

            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////

#pragma region Constructors, Destructor and Operators
        public:
            /**
             *  Default constructor
             */
            inline explicit fixed_buffer_t()
            {



            }
            /**
             *  Destructor
             */
            ~fixed_buffer_t() {



            }

            /**
             *  Copy constructor
             */
            inline fixed_buffer_t(const fixed_buffer_t& other) :
                fixed_buffer_t()
            {

                memcpy(data_p_, other.data_p_, capacity());

            }
            /**
             *  Copy operator
             */
            inline fixed_buffer_t& operator = (const fixed_buffer_t& other) {

                memcpy(data_p_, other.data_p_, capacity());

                return *this;
            }

            /**
             *  Move constructor
             */
            inline fixed_buffer_t(fixed_buffer_t&& other) :
                fixed_buffer_t()
            {

                memcpy(data_p_, other.data_p_, capacity());

            }
            /**
             *  Move operator
             */
            inline fixed_buffer_t& operator = (fixed_buffer_t&& other) {

                memcpy(data_p_, other.data_p_, capacity());

                return *this;
            }

#pragma endregion

            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////

#pragma region Methods
        private:
            template<typename item_param_type>
            inline void set_main_t(sz offset, item_param_type&& item) {

                using no_ref_type = std::remove_reference_t<item_param_type>;

                assert(
                    ((offset + sizeof(no_ref_type)) <= capacity())
                    && "fixed_buffer_t out of range"
                );

                *reinterpret_cast<no_ref_type*>(data_p_ + offset) = std::forward<item_param_type>(item);

            }

            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////

        public:
            template<typename item_type>
            inline void set_t(sz offset, const item_type& item) {

                set_main_t(offset, std::forward<const item_type&>(item));
            }
            template<typename item_type>
            inline void set_t(sz offset, item_type&& item) {

                set_main_t(offset, std::forward<item_type>(item));
            }

            template<typename item_type>
            inline item_type& get_t(sz offset) {

                assert(
                    ((offset + sizeof(item_type)) <= capacity())
                    && "fixed_buffer_t out of range"
                );

                return *reinterpret_cast<item_type*>(data_p_ + offset);
            }
            template<typename item_type>
            inline const item_type& get_t(sz offset) const {

                assert(
                    ((offset + sizeof(item_type)) <= capacity())
                    && "fixed_buffer_t out of range"
                );

                return *reinterpret_cast<item_type*>(data_p_ + offset);
            }
#pragma endregion

        };

    }

}