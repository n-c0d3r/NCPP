#pragma once

/**
 *  @file ncpp/containers/tgh.hpp
 *  @brief Implements tagged heap containers.
 */



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/prerequisites.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/utilities/.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/tagged_heap.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/containers/cfv_queue.hpp>
#include <ncpp/containers/fixed_vector_queue.hpp>
#include <ncpp/containers/fixed_vector_stack.hpp>
#include <ncpp/containers/fls_vector.hpp>
#include <ncpp/containers/handle_map.hpp>

#pragma endregion



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



namespace ncpp {

    namespace containers {



        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region C++ STL Containers
        template<typename char_type__ = char, typename char_traits__ = std::char_traits<char>, class tagged_heap_type__ = tagged_heap_t<>>
        using tgh_string_t = typename std::basic_string<
            char_type__, 
            char_traits__, 
            typename tgh_allocator_t<char_type__, tagged_heap_type__>
        >;

        using tgh_string = typename tgh_string_t<>;



        template<typename item_type__, typename tagged_heap_type__ = tagged_heap_t<>>
        using tgh_vector_t = typename std::vector<
            item_type__,
            typename tgh_allocator_t<item_type__, tagged_heap_type__>
        >;



        template<typename key_type__, typename value_type__, typename pr__ = std::less<key_type__>, class tagged_heap_type__ = tagged_heap_t<>>
        using tgh_map_t = typename std::map<
            key_type__,
            value_type__,
            pr__,
            typename tgh_allocator_t<std::pair<const key_type__, value_type__>, tagged_heap_type__>
        >;

        template<typename key_type__, typename value_type__, typename pr__ = std::less<key_type__>, class tagged_heap_type__ = tagged_heap_t<>>
        using tgh_unordered_map_t = typename std::unordered_map<
            key_type__,
            value_type__,
            pr__,
            typename tgh_allocator_t<std::pair<const key_type__, value_type__>, tagged_heap_type__>
        >;



        template<typename key_type__, typename pr__ = std::less<key_type__>, class tagged_heap_type__ = tagged_heap_t<>>
        using tgh_set_t = typename std::set<
            key_type__,
            pr__,
            typename tgh_allocator_t<key_type__, tagged_heap_type__>
        >;

        template<typename key_type__, typename pr__ = std::less<key_type__>, class tagged_heap_type__ = tagged_heap_t<>>
        using tgh_unordered_set_t = typename std::unordered_set<
            key_type__,
            pr__,
            typename tgh_allocator_t<key_type__, tagged_heap_type__>
        >;
#pragma endregion



        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region NCPP Containers
        template<
            typename item_type__
        >
        template<typename item_type__, class tagged_heap_type__ = tagged_heap_t<>>
        using tgh_handle_map_t = typename handle_map_t<
            item_type__,
            typename tgh_allocator_t<typename handle_map_id_type<item_type__>, tagged_heap_type__>,
            typename tgh_allocator_t<typename handle_map_cell_type<item_type__>, tagged_heap_type__>
        >;
#pragma endregion

    }

}