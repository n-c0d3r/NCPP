#pragma once

/**
 *  @file ncpp/pac/pthread.hpp
 *  @brief Implements thread for posix platform.
 * 	@details Must be included with #ifndef NCPP_WINDOWS_PLATFORM.
 */



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/prerequisites.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/utilities/.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/pac/thread.hpp>

#pragma endregion



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



namespace ncpp {

	namespace pac {



		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



		class pthread;



		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



		/**
		 *	Specifies a variable storing in thread local storage. 
		 */
#define NCPP_THREAD_LOCAL_DATA __thread



		/**
		 *	Gets current thread id
		 */
		extern u32 current_thread_id();
		/**
		 *	Gets current thread index
		 */
		extern u32 current_thread_index();
		/**
		 *	Gets main thread
		 */
		extern pthread& main_thread();

		extern void reset_thread_indices();



		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



		/**
		 *  The windows platform version of pac::thread
		 */
		class NCPP_DEFAULT_ALIGNAS pthread {

			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////

		public:
			friend pthread& main_thread();

			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////

#pragma region Typedefs
		public:
			using functor_type = std::function<void()>;
#pragma endregion

			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////

#pragma region Nested Types
		private:
			struct main_thread_creation_placeholder {};
#pragma endregion

			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////

#pragma region Properties
		private:
			/**
			 *  The pthread id.
			 */
			pthread_t __platform__id_;

			/**
			 *  The main function to be run inside the thread.
			 */
			functor_type functor_;
			sz stack_size_;
			std::atomic_bool is_ready_;
			bool is_main_;
            std::atomic_bool is_done_;
#pragma endregion

			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////

#pragma region Getters and Setters
		public:
			inline pthread_t __platform__id() const { return __platform__id_; }
			inline u32 id() const { return __platform__id_; }
			inline const functor_type& functor() const { return functor_; }
			inline bool is_main() { return is_main_; }
			inline bool is_done() const { return is_done_.load(std::memory_order_acquire); }
#pragma endregion

			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////

#pragma region Constructors, Destrutor and Operators
		private:
			/**
			 *  The constructor to create main thread instance.
			 */
			inline pthread(main_thread_creation_placeholder) :
				__platform__id_(pthread_self()),
				stack_size_(0),
				is_ready_(1),
				is_done_(0),
				
				is_main_(1)
			{

				size_t stksize;
                pthread_attr_t atr;
                pthread_attr_getstacksize(&atr, &stksize);

				stack_size_ = stksize;

			}

			static pthread main_thread_g;

			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////

		public:
			/**
			 *	Default constructor.
			 *	This constructor will construct an empty thread object
			 */
			inline pthread() :
				__platform__id_(0),
				stack_size_(NCPP_DEFAULT_THREAD_STACK_SIZE),
				is_done_(0),

				is_main_(0)
			{



			}
			/**
			 *	Initialization constructor.
			 */
			inline pthread(const functor_type& functor, sz stack_size = NCPP_DEFAULT_THREAD_STACK_SIZE) :
				__platform__id_(0),
				is_ready_(0),
				stack_size_(stack_size),
				is_done_(0),
				functor_(functor),

				is_main_(0)
			{

                pthread_attr_t attr;

                assert(!pthread_attr_init(&attr));

                void* stack = 0;
                pthread_attr_setstack(&attr, &stack, stack_size_);

				pthread_create(&__platform__id_, &attr, proc, this);

				assert(__platform__id_ != 0 && "thread creating failed");

				while (!is_ready_.load(std::memory_order_acquire));

			}
			/**
			 *	Initialization constructor.
			 */
			inline pthread(functor_type&& functor, sz stack_size = NCPP_DEFAULT_THREAD_STACK_SIZE) :
				__platform__id_(0),
				is_ready_(0),
				is_done_(0),
				stack_size_(stack_size),
				functor_(std::move(functor)),

				is_main_(0)
			{

                pthread_attr_t attr;

                assert(!pthread_attr_init(&attr));

                void* stack = 0;
                pthread_attr_setstack(&attr, &stack, stack_size_);

				pthread_create(&__platform__id_, &attr, proc, this);

				assert(__platform__id_ != 0 && "thread creating failed");

				while (!is_ready_.load(std::memory_order_acquire));

			}
			/**
			 *	Destructor
			 */
			~pthread() {

				if (__platform__id_ == 0) return;

				if (!is_main_) {

					assert(is_done() && "Cant release currently running thread");

				}

			}

			inline pthread(const pthread&) = delete;
			inline pthread& operator = (const pthread&) = delete;

			/**
			 *	Move constructor
			 */
			inline pthread(pthread&& other) noexcept  :
				pthread()
			{

				while (!other.is_ready_.load(std::memory_order_relaxed));
				std::atomic_thread_fence(std::memory_order_acquire);

				__platform__id_ = other.__platform__id_;
				stack_size_ = other.stack_size_;
				is_done_.store(other.is_done_.load(std::memory_order_acquire), std::memory_order_release);
				is_main_ = other.is_main_;
				functor_ = std::move(other.functor_);

				other.reset();

			}

			/**
			 *	Move operator
			 */
			inline pthread& operator = (pthread&& other) noexcept {

				while (!other.is_ready_.load(std::memory_order_relaxed));
				std::atomic_thread_fence(std::memory_order_acquire);

				__platform__id_ = other.__platform__id_;
				stack_size_ = other.stack_size_;
				is_done_.store(other.is_done_.load(std::memory_order_acquire), std::memory_order_release);
				is_main_ = other.is_main_;
				functor_ = std::move(other.functor_);

				other.reset();

				return *this;
			}
#pragma endregion

			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////

#pragma region Methods
        private:
            inline void reset() {

				__platform__id_ = 0;
				stack_size_ = 0;
				is_ready_ = 0;
				is_done_ = 0;
				is_main_ = 0;

            }

		public:
			/**
			 *  The main procedure of the thread.
			 */
			static void* proc(void* lpParam);

			/**
			 *  Waits the thread proc done
			 */
			inline void wait() {

				assert(__platform__id_ != 0 && "thread is null");

				while (!is_done());

			}

			/**
			 *	Sets thread affinity by mask
			 */
			inline u64 set_affinity_mask(u64 mask) {

				assert(__platform__id_ != 0 && "thread is null");

				return 0;
			}
#pragma endregion

		};


		
		using thread = pthread;

	}

}