#pragma once

/** @file ncpp/mem.hpp
*	@brief Contains the memory management utilities.
*/



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/prerequisites.hpp>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/allocator_base.hpp>
#include <ncpp/utilities/lref.hpp>

#pragma endregion



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



namespace ncpp {

	template<typename target_allocator_type__>
	class link_allocator_t : public allocator_base_t<link_allocator_t<target_allocator_type__>> {

	public:
		using target_allocator_type = target_allocator_type__;



	private:
		utilities::lref_t<target_allocator_type> target_allocator_ref_;



	public:
		inline target_allocator_type& target_allocator() { return *target_allocator_ref_; }
		inline const target_allocator_type& target_allocator() const { return *target_allocator_ref_; }



	public:
		inline link_allocator_t(const char* name = 0) :
			allocator_base_t<link_allocator_t<target_allocator_type__>>(name)
		{



		}
		inline link_allocator_t(target_allocator_type& target_allocator, const char* name = 0) :
			allocator_base_t<link_allocator_t<target_allocator_type__>>(name),
			target_allocator_ref_(target_allocator)
		{



		}
		inline link_allocator_t(const link_allocator_t& x) :
			link_allocator_t(x.target_allocator(), x.name_)
		{



		}

		~link_allocator_t() {

			reset();
		}

		

	public:
		inline void* new_mem(sz size) {

			assert(!target_allocator_ref_.is_null());

			return target_allocator_ref_->new_mem(size);
		}
		inline void delete_mem(void* p) {

			assert(!target_allocator_ref_.is_null());

			target_allocator_ref_->delete_mem(p);
		}

		inline void reset() {

			if (target_allocator_ref_.is_null())
				return;

			target_allocator_ref_->reset();

			target_allocator_ref_.clear();

		}
		inline void clear() {

			if (target_allocator_ref_.is_null())
				return;

			target_allocator_ref_->clear();

		}

	};

}

