#pragma once

/**
 *  @file ncpp/dop/tgh.hpp
 *  @brief Implements tgh functionalityies.
 */



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/prerequisites.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/utilities/.hpp>
#include <ncpp/containers/.hpp>
#include <ncpp/pac/.hpp>

#pragma endregion



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



namespace ncpp {

    namespace dop {



        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#define NCPP_NATIVE_ALLOCATOR_SYS_LIFETIME ncpp::global_tagged_heap_t<ncpp::dop::tagged_heap_getter>(), ncpp::dop::job_system::instance().tgh_sys_lifetime_cid()



        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



        template<typename data_type__>
        using tgh_vector_t = typename std::vector<data_type__, typename tgh_allocator_t<data_type__>>;

        template<typename data_type__>
        using tgh_fv_queue_t = typename containers::fixed_vector_queue_t<data_type__, typename tgh_allocator_t<data_type__>>;

        template<typename data_type__>
        using tgh_fv_stack_t = typename containers::fixed_vector_stack_t<data_type__, typename tgh_allocator_t<data_type__>>;

        template<typename data_type__>
        using tgh_handle_map_t = typename containers::handle_map_t<
            data_type__,
            typename tgh_allocator_t<typename containers::handle_map_id_type<data_type__>>,
            typename tgh_allocator_t<typename containers::handle_map_cell_type<data_type__>>
        >;



        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



        enum class tgh_allocator_category {

            SYS_LIFETIME

        };



        template<typename data_type__>
        tgh_allocator_t<data_type__>& tgh_global_allocator_t(tgh_allocator_category category = tgh_allocator_category::SYS_LIFETIME);
        template<typename data_type__>
        tgh_allocator_t<data_type__>& tgh_global_allocator_t(tagged_heap_t<> tgh, tagged_heap_t<>::category_id_type tgh_cid);
        template<typename data_type__>
        tgh_allocator_t<data_type__>& tgh_global_allocator_t(tagged_heap_t<>::category_id_type tgh_cid);

        template<typename data_type__>
        class tgh_global_allocator_class_t {

        public:
            friend tgh_allocator_t<data_type__>& tgh_global_allocator_t<data_type__>(tgh_allocator_category category);
            friend tgh_allocator_t<data_type__>& tgh_global_allocator_t<data_type__>(tagged_heap_t<> tgh, tagged_heap_t<>::category_id_type tgh_cid);
            friend tgh_allocator_t<data_type__>& tgh_global_allocator_t<data_type__>(tagged_heap_t<>::category_id_type tgh_cid);



        private:
            static tgh_allocator_t<data_type__> instance_g;



        public:
            inline tgh_allocator_t<data_type__>& instance() { return instance_g; }

        };

        template<typename data_type__>
        tgh_allocator_t<data_type__> tgh_global_allocator_class_t<data_type__>::instance_g;

        template<typename data_type__>
        tgh_allocator_t<data_type__>& tgh_global_allocator_t(tgh_allocator_category category) {

            auto& result = tgh_global_allocator_class_t<data_type__>::instance_g;

            if (result.is_null()) {

                if (category == tgh_allocator_category::SYS_LIFETIME) {

                    tgh_allocator_t<data_type__> new_instance(NCPP_NATIVE_ALLOCATOR_SYS_LIFETIME);
                    result = new_instance;

                }

            }

            return result;
        }

        template<typename data_type__>
        tgh_allocator_t<data_type__>& tgh_global_allocator_t(tagged_heap_t<> tgh, tagged_heap_t<>::category_id_type tgh_cid) {

            auto& result = tgh_global_allocator_class_t<data_type__>::instance_g;

            if (result.is_null()) {

                if (category == tgh_allocator_category::SYS_LIFETIME) {

                    tgh_allocator_t<data_type__> new_instance(tgh, tgh_cid);
                    result = new_instance;

                }

            }

            return result;
        }

        template<typename data_type__>
        tgh_allocator_t<data_type__>& tgh_global_allocator_t(tagged_heap_t<>::category_id_type tgh_cid) {

            auto& result = tgh_global_allocator_class_t<data_type__>::instance_g;

            if (result.is_null()) {

                if (category == tgh_allocator_category::SYS_LIFETIME) {

                    tgh_allocator_t<data_type__> new_instance(global_tagged_heap_t<tagged_heap_getter>(), tgh_cid);
                    result = new_instance;

                }

            }

            return result;
        }



        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



        struct tagged_heap_getter {

            static tagged_heap_t<>& get();

        };



        template<typename data_type__>
        using tgh_allocator_t = typename ncpp::tgh_allocator_t<data_type__>;

        template<typename data_type__, typename... arg_types__>
        data_type__* tgh_new_t(
            typename tgh_allocator_t<data_type__>& allocator,
            arg_types__&&... args
        )
        {

            data_type__* ptr = allocator.allocate(1);
            new(ptr) data_type__(std::forward<arg_types__>(args)...);

            return ptr;
        }

        template<typename data_type__, typename... arg_types__>
        data_type__* tgh_new_sys_lifetime_t(
            arg_types__&&... args
        )
        {

            return tgh_new_t<data_type__, arg_types__...>(tgh_global_allocator_t<data_type__>(), std::forward<arg_types__>(args)...);
        }

        template<typename data_type__, typename... arg_types__>
        data_type__& tgh_create_t(
            typename tgh_allocator_t<data_type__>& allocator,
            arg_types__&&... args
        )
        {

            return *tgh_new_t<data_type__, arg_types__...>(allocator, std::forward<arg_types__>(args)...);
        }

        template<typename data_type__, typename... arg_types__>
        data_type__& tgh_create_sys_lifetime_t(
            arg_types__&&... args
        )
        {

            return tgh_create_t<data_type__, arg_types__...>(tgh_global_allocator_t<data_type__>(), std::forward<arg_types__>(args)...);
        }



        template<typename data_type__>
        using tgh_unique_ptr_t = typename std::unique_ptr<data_type__, typename utilities::allocator_deleter_t<typename tgh_allocator_t<data_type__>>>;

    }

}