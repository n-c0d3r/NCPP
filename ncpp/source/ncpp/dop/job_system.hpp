#pragma once

/**
 *  @file ncpp/dop/job_system.hpp
 *  @brief Implements job system.
 */



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/prerequisites.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/utilities/.hpp>
#include <ncpp/containers/.hpp>
#include <ncpp/pac/.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/dop/job.hpp>
#include <ncpp/dop/job_wthread.hpp>
#include <ncpp/dop/tgh.hpp>

#pragma endregion



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



namespace ncpp {

    namespace dop {

        class job_system;
        class job_wthread;
        class job_wthread_scheduler;
        class job_instance;
        class job_instance_pool;
        struct job;
        struct job_handle;



        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



        /**
         *  Job system
         */
        class job_system final :
            public utilities::singleton_t<job_system>
        {

            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////

        public:
            friend class job_system;
            friend class job_wthread;
            friend class job_wthread_scheduler;
            friend class job_instance;
            friend class job_instance_pool;
            friend struct job;
            friend struct job_handle;

            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////

        public:
            using tagged_heap_type = tgh;
            using tgh_cid_type = typename tagged_heap_type::category_id_type;

            using wthread_ref_vector_type = typename tgh_vector_t<utilities::lref_t<job_wthread>>;

            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////

        private:
            utilities::lref_t<dop::job> entry_job_ref_;
            u8 wthread_count_;
            u32 job_handle_queue_capacity_;
            u32 job_instance_pool_capacity_;

            sz stack_heap_LARGE_stack_capacity_;
            sz stack_heap_LARGE_stack_count_;
            sz stack_heap_NORMAL_stack_capacity_;
            sz stack_heap_NORMAL_stack_count_;
            sz stack_heap_SMALL_stack_capacity_;
            sz stack_heap_SMALL_stack_count_;

            tagged_heap_type tagged_heap_;
            tgh_cid_type tgh_sys_lifetime_cid_;

            wthread_ref_vector_type wthread_ref_vector_;
            au8 ready_wthread_count_;

            ab8 is_running_;
                      
            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////

        public:
            inline dop::job& entry_job() { return *entry_job_ref_; }
            inline u8 wthread_count() const { return wthread_count_; }
            inline u32 job_handle_queue_capacity() const { return job_handle_queue_capacity_; }
            inline u32 job_instance_pool_capacity() const { return job_instance_pool_capacity_; }

            inline sz stack_heap_LARGE_stack_capacity() { return stack_heap_LARGE_stack_capacity_; }
            inline sz stack_heap_LARGE_stack_count() { return stack_heap_LARGE_stack_count_; }
            inline sz stack_heap_NORMAL_stack_capacity() { return stack_heap_NORMAL_stack_capacity_; }
            inline sz stack_heap_NORMAL_stack_count() { return stack_heap_NORMAL_stack_count_; }
            inline sz stack_heap_SMALL_stack_capacity() { return stack_heap_SMALL_stack_capacity_; }
            inline sz stack_heap_SMALL_stack_count() { return stack_heap_SMALL_stack_count_; }

            inline tagged_heap_type& tagged_heap() { return tagged_heap_; }
            inline tgh_cid_type tgh_sys_lifetime_cid() const { return tgh_sys_lifetime_cid_; }

            inline u8 ready_wthread_count() const { return ready_wthread_count_.load(std::memory_order_acquire); }
            inline b8 is_ready() const { return ready_wthread_count() == wthread_count_; }

            inline b8 is_running() const { return is_running_.load(std::memory_order_acquire); }

            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////

        public:
            job_system(
                utilities::lref_t<dop::job> entry_job_ref,
                u8 wthread_count = pac::hardware_concurrency(),
                u32 job_handle_queue_capacity = NCPP_DEFAULT_JOB_HANDLE_QUEUE_CAPACITY,
                u32 job_instance_pool_capacity = NCPP_DEFAULT_JOB_INSTANCE_POOL_CAPACITY,

                sz stack_heap_LARGE_stack_capacity = NCPP_DEFAULT_STACK_HEAP_STACK_CAPACITY_LARGE,
                sz stack_heap_LARGE_stack_count = NCPP_DEFAULT_STACK_COUNT_PER_CHUNK_LARGE,
                sz stack_heap_NORMAL_stack_capacity = NCPP_DEFAULT_STACK_HEAP_STACK_CAPACITY_NORMAL,
                sz stack_heap_NORMAL_stack_count = NCPP_DEFAULT_STACK_COUNT_PER_CHUNK_NORMAL,
                sz stack_heap_SMALL_stack_capacity = NCPP_DEFAULT_STACK_HEAP_STACK_CAPACITY_SMALL,
                sz stack_heap_SMALL_stack_count = NCPP_DEFAULT_STACK_COUNT_PER_CHUNK_SMALL
            );
            ~job_system();

            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////

        private:
            void create_wthreads();
            void init_wthreads();
            void run_wthreads();
            void wait_wthreads();



        public:
            void run();
            void wait();

        };

    }

}