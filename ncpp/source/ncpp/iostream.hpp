#pragma once

/** @file ncpp/iostream.hpp
*	@brief Implement iostream with custom allocators,...
*/



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/prerequisites.hpp>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifdef NCPP_ENABLE_MEMORY_COUNTING
#include <ncpp/memory_counting.hpp>
#endif

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/native_allocator.hpp>
#include <ncpp/utilities/is_streamable.hpp>

#pragma endregion



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



namespace ncpp {



	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



	template<typename stream_type__, typename type__, b8 is_streamable__>
	struct safe_ostream_forwarder_t {

	};

	template<typename stream_type__, typename type__>
	struct safe_ostream_forwarder_t<stream_type__, type__, true> {

		static inline stream_type__& forward(stream_type__& stream, type__&& data) {

			stream << data;

			return stream;
		}
	};

	template<typename stream_type__, typename type__>
	struct safe_ostream_forwarder_t<stream_type__, type__, false> {

		static inline stream_type__& forward(stream_type__& stream, type__&& data) {



			return stream;
		}
	};



	template<typename stream_type__, typename type__>
	inline stream_type__& safe_ostream_t(stream_type__& stream, type__&& data) {

		using safe_ostream_forward_type = typename safe_ostream_forwarder_t<
			stream_type__,
			type__,
			utilities::is_ostreamable_t<
				stream_type__,
				type__
			>::value
		>;
			
		return safe_ostream_forward_type::forward(stream, std::forward<type__>(data));
	}



	template<typename stream_type__, typename type__, b8 is_streamable__>
	struct safe_istream_forwarder_t {

	};

	template<typename stream_type__, typename type__>
	struct safe_istream_forwarder_t<stream_type__, type__, true> {

		static inline stream_type__& forward(stream_type__& stream, type__&& data) {

			stream >> data;

			return stream;
		}
	};

	template<typename stream_type__, typename type__>
	struct safe_istream_forwarder_t<stream_type__, type__, false> {

		static inline stream_type__& forward(stream_type__& stream, type__&& data) {



			return stream;
		}
	};



	template<typename stream_type__, typename type__>
	inline stream_type__& safe_istream_t(stream_type__& stream, type__&& data) {

		using safe_istream_forward_type = typename safe_istream_forwarder_t<
			stream_type__,
			type__,
			utilities::is_istreamable_t<
			stream_type__,
			type__
			>::value
		>;

		return safe_istream_forward_type::forward(stream, std::forward<type__>(data));
	}

}

