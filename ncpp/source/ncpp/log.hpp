#pragma once

/** @file ncpp/log.hpp
*	@brief Implement logging functionalities.
*/



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/prerequisites.hpp>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/containers/.hpp>
#include <ncpp/iostream.hpp>

#pragma endregion



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



namespace ncpp {



	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



	/*
	inline std::ostream& ostream_push_field_name (
		std::ostream& os,
		eastl::string name
	) {

		return (os << ("\x1B[36m" + name + "\033[0m").c_str());
	}*/

	struct cout_lowlight {
		eastl::string content;
	};
	struct cout_field_name {
		eastl::string content;
	};

	inline std::ostream& operator << (
		std::ostream& os,
		const cout_lowlight& input
	) {

		if(&os != &std::cout)
			return os << input.content.c_str();

		return (os << ("\x1B[90m" + input.content + "\033[0m").c_str());
	}
	inline std::ostream& operator << (
		std::ostream& os,
		const cout_field_name& input
	) {

		if (&os != &std::cout)
			return os << input.content.c_str();

		return (os << ("\x1B[36m" + input.content + "\033[0m").c_str());
	}



	template<typename item_type__, class allocator_type__>
	std::ostream& operator << (
		std::ostream& os, 
		const ostream_input_t<
			eastl::vector<item_type__, allocator_type__>
		>& input
	)
	{

		if (input.second > NCPP_MAX_TAB_COUNT) {

			os << cout_lowlight("...");

			return os;
		}

		os << cout_lowlight("{") << std::endl;

		for (sz i = 0; i < input.first.size(); ++i) {

			for (u32 j = 0; j < (input.second + 1) * NCPP_TAB_SIZE; ++j) {

				os << " ";

			}

			os << cout_field_name(eastl::to_string(i)) << cout_lowlight(": ");

			safe_ostream_with_tab_t<std::ostream, item_type__>(os, { input.first[i], input.second + 1 });

			if (i != input.first.size() - 1)
				os << cout_lowlight(",");

			os << std::endl;

		}

		for (u32 j = 0; j < (input.second) * NCPP_TAB_SIZE; ++j) {

			os << " ";

		}
		os << cout_lowlight("}");

		return os;
	}
			
	template<typename item_type__, class allocator_type__>
	std::ostream& operator << (std::ostream& os, const eastl::vector<item_type__, allocator_type__>& v)
	{

		os << ostream_input_t<eastl::vector<item_type__, allocator_type__>> { v, 0 };

		return os;
	}


	
	template<typename item_type__, class allocator_type__>
	std::ostream& operator << (std::ostream& os, const eastl::basic_string<item_type__, allocator_type__>& str)
	{

		if (&os == &std::cout) {

			eastl::string colored_str = "";
			colored_str += "\x1B[32m";
			colored_str += '"';
			colored_str += str;
			colored_str += '"';
			colored_str += "\033[0m";

			os << colored_str.c_str();

		}
		else
			os << str.c_str();

		return os;
	}



	/*
	template<
		typename item_type__,
		class id_allocator_type__,
		class cell_allocator_type__
	>
	std::ostream& operator << (
		std::ostream& os, 
		const ostream_input_t<
			containers::handle_map_t<item_type__, id_allocator_type__, cell_allocator_type__>
		>& input
	)
	{

		if (input.second > NCPP_MAX_TAB_COUNT) {

			os << "...";

			return os;
		}

		os << "{" << std::endl;

		for (sz i = 0; i < input.first.count(); ++i) {

			for (u32 j = 0; j < (input.second + 1) * NCPP_TAB_SIZE; ++j) {

				os << " ";

			}

			os << input.first[i].outer_index << ": ";

			safe_ostream_with_tab_t<std::ostream, item_type__>(os, { input.first[i].item, input.second + 1 });

			if (i != input.first.count() - 1)
				os << ",";

			os << std::endl;

		}

		for (u32 j = 0; j < (input.second) * NCPP_TAB_SIZE; ++j) {

			os << " ";

		}
		os << "}";

		return os;
	}

	template<
		typename item_type__,
		class id_allocator_type__,
		class cell_allocator_type__
	>
	std::ostream& operator << (std::ostream& os, const containers::handle_map_t<item_type__, id_allocator_type__, cell_allocator_type__>& handle_map)
	{

		os << ostream_input_t<containers::handle_map_t<item_type__, id_allocator_type__, cell_allocator_type__>> { handle_map, 0 };

		return os;
	}*/

}

