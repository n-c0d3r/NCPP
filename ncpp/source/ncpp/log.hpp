#pragma once

/** @file ncpp/log.hpp
*	@brief Implement logging functionalities.
*/



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/prerequisites.hpp>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/containers/.hpp>
#include <ncpp/iostream.hpp>

#pragma endregion



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



namespace ncpp {

#pragma region Colorized Contents
	/**
	 *	Wraps content string inside to be streamed out with low light color.
	 */
	struct F_cout_lowlight {
		eastl::string content;
	};
	/**
	 *	Wraps content string inside to be streamed out with field name color.
	 */
	struct F_cout_field_name {
		eastl::string content;
	}; 
	/**
	 *	Wraps nanoseconds number inside to be streamed out with nanoseconds color.
	 */
	struct F_cout_nanoseconds {
		u64 nanoseconds;
	};
#pragma endregion

}







//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Colorized Contents

/**
 *	Streams out cout_lowlight.
 */
inline std::ostream& operator << (
	std::ostream& os,
	const ncpp::F_cout_lowlight& input
) {

	if (&os != &std::cout)
		return os << input.content.c_str();

	return (os << ("\x1B[90m" + input.content + "\033[0m").c_str());
}
/**
 *	Streams out cout_field_name.
 */
inline std::ostream& operator << (
	std::ostream& os,
	const ncpp::F_cout_field_name& input
) {

	if (&os != &std::cout)
		return os << input.content.c_str();

	return (os << ("\x1B[36m" + input.content + "\033[0m").c_str());
}
/**
 *	Streams out cout_nanoseconds.
 */
inline std::ostream& operator << (
	std::ostream& os,
	const ncpp::F_cout_nanoseconds& input
) {

	if (&os != &std::cout)
		return os << input.nanoseconds;

	return (os << ("\x1B[31m" + eastl::to_string(input.nanoseconds) + "\033[0m").c_str());
}
#pragma endregion



#pragma region String
/**
 *	Streams out eastl::string.
 */
template<typename F_item__, class F_allocator__>
std::ostream& operator << (std::ostream& os, const eastl::basic_string<F_item__, F_allocator__>& str)
{

	if (&os == &std::cout) {

		eastl::string colored_str = "";
		colored_str += "\x1B[32m";
		colored_str += '"';
		colored_str += str;
		colored_str += '"';
		colored_str += "\033[0m";

		os << colored_str.c_str();

	}
	else
		os << str.c_str();

	return os;
}
#pragma endregion



#pragma region Vector
/**
 *	Streams out eastl::vector with tabs.
 */
template<typename F_item__, class F_allocator__>
std::ostream& operator << (
	std::ostream& os,
	const ncpp::TF_ostream_input<
		eastl::vector<F_item__, F_allocator__>
	>& input
)
{

	if (input.second > (ncpp::u32)NCPP_MAX_TAB_COUNT) {

		os << ncpp::F_cout_lowlight("...");

		return os;
	}

	os << "\x1B[33mvector\033[0m"
		<< ncpp::F_cout_lowlight("<") << ("\x1B[34m" + eastl::string(typeid(F_item__).name()) + "\033[0m").c_str() << ncpp::F_cout_lowlight(">")
		<< ncpp::F_cout_lowlight("(") << ("\x1B[35m" + eastl::to_string(input.first.size()) + "\033[0m").c_str() << ncpp::F_cout_lowlight(")")
		<< " ";

	os << ncpp::F_cout_lowlight("{") << std::endl;

	for (ncpp::sz i = 0; i < input.first.size(); ++i) {

		for (ncpp::u32 j = 0; j < (input.second + 1) * NCPP_TAB_SIZE; ++j) {

			os << " ";

		}

		os << ncpp::F_cout_field_name(eastl::to_string(i)) << ncpp::F_cout_lowlight(": ");

		ncpp::T_safe_ostream_with_tab<std::ostream, F_item__>(os, { input.first[i], input.second + 1 });

		if (i != input.first.size() - 1)
			os << ncpp::F_cout_lowlight(",");

		os << std::endl;

	}

	for (ncpp::u32 j = 0; j < (input.second) * NCPP_TAB_SIZE; ++j) {

		os << " ";

	}
	os << ncpp::F_cout_lowlight("}");

	return os;
}

/**
 *	Streams out eastl::vector with no tab.
 */
template<typename F_item__, class F_allocator__>
std::ostream& operator << (std::ostream& os, const eastl::vector<F_item__, F_allocator__>& v)
{

	os << ncpp::TF_ostream_input<eastl::vector<F_item__, F_allocator__>> { v, 0 };

	return os;
}
#pragma endregion



#pragma region Initialier List
/**
 *	Streams out std::initialier_list<T> with tabs.
 */
template<typename F_item__>
std::ostream& operator << (
	std::ostream& os,
	const ncpp::TF_ostream_input<
		std::initializer_list<F_item__>
	>& input
)
{

	if (input.second > (ncpp::u32)NCPP_MAX_TAB_COUNT) {

		os << ncpp::F_cout_lowlight("...");

		return os;
	}

	os << "\x1B[33minitializer_list\033[0m"
		<< ncpp::F_cout_lowlight("<") << ("\x1B[34m" + eastl::string(typeid(F_item__).name()) + "\033[0m").c_str() << ncpp::F_cout_lowlight(",")
		<< ("\x1B[35m" + eastl::to_string(input.first.size()) + "\033[0m").c_str() << ncpp::F_cout_lowlight(">")
		<< " ";

	os << ncpp::F_cout_lowlight("{") << std::endl;

	auto j = input.first.begin();

	for (ncpp::sz i = 0; i < input.first.size(); ++i) {

		for (ncpp::u32 j = 0; j < (input.second + 1) * NCPP_TAB_SIZE; ++j) {

			os << " ";

		}

		os << ncpp::F_cout_field_name(eastl::to_string(i)) << ncpp::F_cout_lowlight(": ");

		ncpp::T_safe_ostream_with_tab<std::ostream, F_item__>(os, { *j, input.second + 1 });

		if (i != input.first.size() - 1)
			os << ncpp::F_cout_lowlight(",");

		os << std::endl;

		++j;

	}

	for (ncpp::u32 j = 0; j < (input.second) * NCPP_TAB_SIZE; ++j) {

		os << " ";

	}
	os << ncpp::F_cout_lowlight("}");

	return os;
}

/**
 *	Streams out std::initialier_list<T> with no tab.
 */
template<typename F_item__>
std::ostream& operator << (std::ostream& os, const std::initializer_list<F_item__>& v)
{

	os << ncpp::TF_ostream_input<std::initializer_list<F_item__>> { v, 0 };

	return os;
}
#pragma endregion



#pragma region Array
/**
 *	Streams out eastl::array<T, N> with tabs.
 */
template<typename F_item__, ncpp::sz size__>
std::ostream& operator << (
	std::ostream& os,
	const ncpp::TF_ostream_input<
		eastl::array<F_item__, size__>
	>& input
)
{

	if (input.second > (ncpp::u32)NCPP_MAX_TAB_COUNT) {

		os << ncpp::F_cout_lowlight("...");

		return os;
	}

	os << "\x1B[33marray\033[0m"
		<< ncpp::F_cout_lowlight("<") << ("\x1B[34m" + eastl::string(typeid(F_item__).name()) + "\033[0m").c_str() << ncpp::F_cout_lowlight(",")
		<< ("\x1B[35m" + eastl::to_string(input.first.size()) + "\033[0m").c_str() << ncpp::F_cout_lowlight(">")
		<< " ";

	os << ncpp::F_cout_lowlight("{") << std::endl;



	for (ncpp::sz i = 0; i < size__; ++i) {

		for (ncpp::u32 j = 0; j < (input.second + 1) * NCPP_TAB_SIZE; ++j) {

			os << " ";

		}

		os << ncpp::F_cout_field_name(eastl::to_string(i)) << ncpp::F_cout_lowlight(": ");

		ncpp::T_safe_ostream_with_tab<std::ostream, F_item__>(os, { input.first[i], input.second + 1 });

		if (i != size__ - 1)
			os << ncpp::F_cout_lowlight(",");

		os << std::endl;

	}

	for (ncpp::u32 j = 0; j < (input.second) * NCPP_TAB_SIZE; ++j) {

		os << " ";

	}
	os << ncpp::F_cout_lowlight("}");

	return os;
}

/**
 *	Streams out eastl::array<T, N> with no tab.
 */
template<typename F_item__, ncpp::sz size__>
std::ostream& operator << (std::ostream& os, const eastl::array<F_item__, size__>& v)
{

	os << ncpp::TF_ostream_input<eastl::array<F_item__, size__>> { v, 0 };

	return os;
}
#pragma endregion


