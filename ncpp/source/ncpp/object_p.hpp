#pragma once

/** @file ncpp/smart_p.hpp
*	@brief Implement smart pointers.
*/



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/prerequisites.hpp>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/mem/default_allocator.hpp>
#include <ncpp/mem/object_allocator.hpp>
#include <ncpp/rtti/rtti_flag.hpp>
#include <ncpp/utilities/mem_wrap.hpp>
#include <ncpp/utilities/alignof.hpp>

#pragma endregion



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



namespace ncpp {

#define NCPP_OBJECT_POINTER_FRIEND_CLASSES_INTERNAL \
            template<class F_options__>\
            friend class TA_object_memory;               \
            template<b8 enable_counter__, T_is_object F_object__, class F_options__>\
            friend class TF_object_memory;               \
                                                    \
            template<T_is_object F_object__, typename F_allocator__, class F_options__>\
            friend class TU_object_p;\
            template<T_is_object F_object__, typename F_allocator__, class F_options__>\
            friend class TS_object_p;\
            template<T_is_object F_object__, class F_options__>\
            friend class TK_object_p;\
            template<T_is_object F_object__>\
            friend class TW_object_p;



    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#define NCPP_OBJECT_IMPLEMENT(...) \
            NCPP_RTTI_IMPLEMENT_FLAG(ncpp::TF_object_flag<__VA_ARGS__>);\
            NCPP_OBJECT_POINTER_FRIEND_CLASSES_INTERNAL

#define NCPP_OBJECT_THREAD_SAFE \
            NCPP_RTTI_IMPLEMENT_FLAG(ncpp::F_object_thread_safe_flag);



    template<typename F_object__>
    struct TF_object_flag {};

    NCPP_RTTI_CREATE_FLAG(F_object_thread_safe_flag);

    template<typename F__>
    concept T_is_object = NCPP_RTTI_IS_HAS_FLAG(F__, TF_object_flag<F__>);
    template<typename F__>
    concept T_is_object_thread_safe = T_is_object<F__> && NCPP_RTTI_IS_HAS_FLAG(F__, F_object_thread_safe_flag);

    using F_object_id = u32;
    using F_object_generation = u32;
    struct F_object_signature {

        union {

            u64 value = NCPP_U64_MAX;

            struct {

                F_object_id id;
                F_object_generation generation;

            };

        };

        NCPP_FORCE_INLINE F_object_signature() noexcept = default;
        NCPP_FORCE_INLINE F_object_signature(u64 value_in) noexcept :
            value(value_in)
        {}
        NCPP_FORCE_INLINE F_object_signature(u32 id_in, u32 generation_in) noexcept :
            id(id_in),
            generation(generation_in)
        {}



        NCPP_FORCE_INLINE operator u64 () const noexcept {

            return value;
        }



        NCPP_FORCE_INLINE b8 is_valid() const noexcept {

            return (value != NCPP_U64_MAX);
        }
        NCPP_FORCE_INLINE b8 is_null() const noexcept {

            return (value == NCPP_U64_MAX);
        }



        NCPP_FORCE_INLINE void reset() noexcept {

            value = NCPP_U64_MAX;
        }

    };



    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    template<class F_options__>
    class TA_object_memory;

    template<b8 enable_counter__, T_is_object F_object__, class F_options__>
    class TF_object_memory;



    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    template<b8 is_thread_safe_ = true>
    class TF_default_object_storage {



    };

    using F_default_object_storage = TF_default_object_storage<>;



    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    template<b8 is_thread_safe__ = true>
    struct TF_object_counter;

    template<>
    struct TF_object_counter<true> {

        static constexpr b8 is_thread_safe = true;
        static constexpr u8 counter_size = 4;

        using F_value = TF_atomic_uint<counter_size>;
        using F_return_value = TF_uint<counter_size>;

        F_value value = 0;

        NCPP_FORCE_INLINE F_return_value increase() noexcept {

            return value.fetch_add(1, eastl::memory_order_acq_rel);
        }
        NCPP_FORCE_INLINE F_return_value decrease() noexcept {

            return value.fetch_sub(1, eastl::memory_order_acq_rel);
        }
        NCPP_FORCE_INLINE F_return_value load() const noexcept {

            return value.load(eastl::memory_order_acquire);
        }

        NCPP_FORCE_INLINE operator F_return_value () const noexcept {

            return load();
        }
    };

    template<>
    struct TF_object_counter<false> {

        static constexpr b8 is_thread_safe = false;
        static constexpr u8 counter_size = 4;

        using F_value = TF_uint<counter_size>;
        using F_return_value = TF_uint<counter_size>;

        F_value value = 0;

        NCPP_FORCE_INLINE F_return_value increase() noexcept {

            return value++;
        }
        NCPP_FORCE_INLINE F_return_value decrease() noexcept {

            return value--;
        }
        NCPP_FORCE_INLINE F_return_value load() const noexcept {

            return value;
        }

        NCPP_FORCE_INLINE operator F_return_value () const noexcept {

            return load();
        }
    };

    using F_object_counter = TF_object_counter<>;



    template<T_is_object F_object__>
    NCPP_FORCE_INLINE TF_object_counter<T_is_object_thread_safe<F_object__>> T_object_counter(const F_object__& object) noexcept {

        return *(
            (TF_object_counter<T_is_object_thread_safe<F_object__>>*)
            (
                ((u64*)&object)
                - 1
            )
        );
    }



    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    template<
        b8 is_storage_thread_safe__ = true
    >
    struct TF_default_object_options {

        using F_this = TF_default_object_options<is_storage_thread_safe__>;

        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////

        using F_storage = TF_default_object_storage<is_storage_thread_safe__>;

        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////

        template<b8 is_counter_thread_safe__ = false>
        using TF_counter = TF_object_counter<
            is_counter_thread_safe__
        >;

        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////

        using A_object_memory = TA_object_memory<F_this>;

        template<b8 enable_counter__, T_is_object F_object__>
        using TF_object_memory = TF_object_memory<enable_counter__, F_object__, F_this>;

    };

    using F_default_object_options = TF_default_object_options<>;



    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    template<class F_options__ = F_default_object_options>
    class TA_object_memory {

    protected:
        NCPP_FORCE_INLINE TA_object_memory() noexcept = default;

    public:
        NCPP_FORCE_INLINE ~TA_object_memory() noexcept = default;

    };



    template<b8 enable_counter__, T_is_object F_object__, class F_options__ = F_default_object_options>
    class TF_object_memory;

    template<T_is_object F_object__, class F_options__>
    class NCPP_ALIGN(8) TF_object_memory<true, F_object__, F_options__> :
        public TA_object_memory<F_options__>
    {

    public:
        NCPP_OBJECT_POINTER_FRIEND_CLASSES_INTERNAL;

        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////

    public:
        using F_this = TF_object_memory<true, F_object__, F_options__>;

        using F_object = F_object__;
        using F_options = F_options__;

        static constexpr b8 is_thread_safe = T_is_object_thread_safe<F_object__>;

        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////

    private:
        F_options::template TF_counter<is_thread_safe> shared_counter_;
        utilities::TF_mem_wrap<F_object__> object_mem_wrap_;

    public:
        NCPP_FORCE_INLINE auto shared_counter() const noexcept { return shared_counter_.load(); }
        NCPP_FORCE_INLINE F_object__* object_p() const noexcept { return (F_object__*)&object_mem_wrap_; }
        NCPP_FORCE_INLINE F_object__& object() const noexcept { return *object_p(); }

        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////

    public:
        NCPP_FORCE_INLINE TF_object_memory() noexcept = default;
        NCPP_FORCE_INLINE ~TF_object_memory() noexcept = default;

        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////

    public:
        template<typename... F_args__>
        NCPP_FORCE_INLINE void T_initialize_object(F_args__&&... args) const {

            new (object_p()) F_object(std::forward<F_args__>(args)...);

        }
        NCPP_FORCE_INLINE void deinitialize_object() const noexcept {

            object_p()->~F_object();

        }

    };

    template<T_is_object F_object__, class F_options__>
    class TF_object_memory<false, F_object__, F_options__> :
        public TA_object_memory<F_options__>
    {

    public:
        NCPP_OBJECT_POINTER_FRIEND_CLASSES_INTERNAL;

        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////

    public:
        using F_this = TF_object_memory<false, F_object__, F_options__>;

        using F_object = F_object__;
        using F_options = F_options__;

        static constexpr b8 is_thread_safe = T_is_object_thread_safe<F_object__>;

        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////

    private:
        utilities::TF_mem_wrap<F_object__> object_mem_wrap_;

    public:
        NCPP_FORCE_INLINE F_object__* object_p() const noexcept { return (F_object__*)&object_mem_wrap_; }
        NCPP_FORCE_INLINE F_object__& object() const noexcept { return *object_p(); }

        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////

    public:
        NCPP_FORCE_INLINE TF_object_memory() noexcept = default;
        NCPP_FORCE_INLINE ~TF_object_memory() noexcept = default;

        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////

    public:
        template<typename... F_args__>
        NCPP_FORCE_INLINE void T_initialize_object(F_args__&&... args) const {

            new (object_p()) F_object(std::forward<F_args__>(args)...);

        }
        NCPP_FORCE_INLINE void deinitialize_object() const noexcept {

            object_p()->~F_object();

        }

    };



    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    template<typename F1__, typename F2__>
    concept T_is_object_down_castable = T_is_object<F1__> && T_is_object<F2__> && requires(F1__* p1, F2__* p2) {
        p2 = p1;
    };
    template<typename F1__, typename F2__>
    concept T_is_object_up_castable = T_is_object_down_castable<F2__, F1__> && !T_is_object_down_castable<F1__, F2__>;



    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    template<T_is_object F_passed_object__>
    class TW_object_p {

    public:
        NCPP_OBJECT_POINTER_FRIEND_CLASSES_INTERNAL;

        using F_passed_object = F_passed_object__;
        using F_object = std::remove_const_t<F_passed_object__>;

        static constexpr b8 is_const = std::is_const_v<F_passed_object__>;

        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////

    private:
        F_passed_object* raw_object_p_ = 0;

    public:
        NCPP_FORCE_INLINE F_passed_object* raw_object_p() const noexcept { return (F_passed_object*)raw_object_p_; }
        NCPP_FORCE_INLINE F_passed_object& object() const noexcept { return *(raw_object_p()); }

        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////

    private:
        NCPP_FORCE_INLINE TW_object_p(F_passed_object* raw_object_p) noexcept :
            raw_object_p_(raw_object_p)
        {

        }

    public:
        NCPP_FORCE_INLINE TW_object_p() noexcept = default;

        template<b8 enable_counter__, T_is_object F_other__, class F_options>
        requires T_is_object_down_castable<F_other__, F_passed_object>
        NCPP_FORCE_INLINE TW_object_p(const TF_object_memory<enable_counter__, F_other__, F_options>& object_memory) noexcept :
            raw_object_p_(object_memory.object_p())
        {

        }
        template<b8 enable_counter__, T_is_object F_other__, class F_options>
        requires T_is_object_down_castable<F_other__, F_passed_object>
        NCPP_FORCE_INLINE TW_object_p& operator = (const TF_object_memory<enable_counter__, F_other__, F_options>& object_memory) noexcept {

            raw_object_p_ = object_memory.object_p();

            return *this;
        }

        NCPP_FORCE_INLINE TW_object_p(const TW_object_p& x) noexcept :
            raw_object_p_(x.raw_object_p_)
        {

        }
        NCPP_FORCE_INLINE TW_object_p& operator = (const TW_object_p& x) noexcept
        {

            raw_object_p_ = (F_passed_object*)x.raw_object_p_;

            return *this;
        }

        NCPP_FORCE_INLINE TW_object_p(TW_object_p&& x) noexcept :
            raw_object_p_(x.raw_object_p_)
        {

            x.reset_no_destroy_internal();

        }
        NCPP_FORCE_INLINE TW_object_p& operator = (TW_object_p&& x) noexcept
        {

            raw_object_p_ = (F_passed_object*)x.raw_object_p_;

            x.reset_no_destroy_internal();

            return *this;
        }

        template<T_is_object F_other__>
        requires T_is_object_down_castable<F_other__, F_passed_object>
        NCPP_FORCE_INLINE TW_object_p(const TW_object_p<F_other__>& x) noexcept :
            raw_object_p_((F_passed_object*)x.raw_object_p_)
        {

        }
        template<T_is_object F_other__>
        requires T_is_object_down_castable<F_other__, F_passed_object>
        NCPP_FORCE_INLINE TW_object_p& operator = (const TW_object_p<F_other__>& x) noexcept
        {

            raw_object_p_ = (F_passed_object*)x.raw_object_p_;

            return *this;
        }

        template<T_is_object F_other__>
        requires T_is_object_down_castable<F_other__, F_passed_object>
        NCPP_FORCE_INLINE TW_object_p(TW_object_p<F_other__>&& x) noexcept :
            raw_object_p_((F_passed_object*)x.raw_object_p_)
        {

            x.reset_no_destroy_internal();

        }
        template<T_is_object F_other__>
        requires T_is_object_down_castable<F_other__, F_passed_object>
        NCPP_FORCE_INLINE TW_object_p& operator = (TW_object_p<F_other__>&& x) noexcept
        {

            raw_object_p_ = (F_passed_object*)x.raw_object_p_;

            x.reset_no_destroy_internal();

            return *this;
        }

        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////

    public:
        template<T_is_object F_other__>
        requires T_is_object_up_castable<F_passed_object, F_other__>
        explicit NCPP_FORCE_INLINE operator TW_object_p<F_other__> () const noexcept {

            return (F_other__*)raw_object_p_;
        }

        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////

    public:
        template<T_is_object F_other__>
        NCPP_FORCE_INLINE TW_object_p<F_other__> T_cast() const noexcept {

            return (F_other__*)raw_object_p_;
        }

        NCPP_FORCE_INLINE b8 is_valid() const noexcept {

            return (raw_object_p_ != 0);
        }
        NCPP_FORCE_INLINE b8 is_null() const noexcept {

            return (raw_object_p_ == 0);
        }



    private:
        NCPP_FORCE_INLINE void reset_no_destroy_internal() noexcept {

            raw_object_p_ = 0;
        }

    public:
        NCPP_FORCE_INLINE void reset() noexcept {

            reset_no_destroy_internal();
        }

    };



    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    template<T_is_object F_passed_object__, typename F_allocator__ = mem::F_object_allocator, class F_options__ = F_default_object_options>
    class TU_object_p {

    public:
        NCPP_OBJECT_POINTER_FRIEND_CLASSES_INTERNAL;

        using F_passed_object = F_passed_object__;
        using F_object = std::remove_const_t<F_passed_object__>;

        using F_allocator = F_allocator__;
        using F_options = F_options__;

        using F_object_memory = TF_object_memory<false, F_passed_object, F_options>;

        static constexpr b8 is_const = std::is_const_v<F_passed_object__>;

        template<T_is_object F_other__>
        using TF_change_object = TU_object_p<F_other__, F_allocator, F_options>;

        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////

    private:
        F_passed_object* raw_object_p_ = 0;
        F_object_signature signature_;

    public:
        NCPP_FORCE_INLINE F_passed_object* raw_object_p() const noexcept { return (F_passed_object*)raw_object_p_; }
        NCPP_FORCE_INLINE F_passed_object& object() const noexcept { return *(raw_object_p()); }

        NCPP_FORCE_INLINE F_object_memory* object_memory_p() const noexcept { return (F_object_memory*)raw_object_p_; }
        NCPP_FORCE_INLINE F_object_memory& object_memory() const noexcept { return *object_memory_p(); }

        NCPP_FORCE_INLINE F_object_signature signature() const noexcept { return signature_; }

        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////

    private:
        NCPP_FORCE_INLINE TU_object_p(F_passed_object* raw_object_p) noexcept :
            raw_object_p_(raw_object_p)
        {

        }

    public:
        NCPP_FORCE_INLINE TU_object_p() noexcept = default;
        NCPP_FORCE_INLINE ~TU_object_p() noexcept {

            reset();
        }

        template<T_is_object F_other__, class F_options>
        requires T_is_object_down_castable<F_other__, F_passed_object>
        NCPP_FORCE_INLINE TU_object_p(const TF_object_memory<false, F_other__, F_options>& object_memory) noexcept :
            raw_object_p_(object_memory.object_p())
        {

        }
        template<T_is_object F_other__, class F_options>
        requires T_is_object_down_castable<F_other__, F_passed_object>
        NCPP_FORCE_INLINE TU_object_p& operator = (const TF_object_memory<false, F_other__, F_options>& object_memory) noexcept {

            raw_object_p_ = object_memory.object_p();

            return *this;
        }

        NCPP_FORCE_INLINE TU_object_p(TU_object_p&& x) noexcept :
            raw_object_p_(x.raw_object_p_)
        {

            x.reset_no_destroy_internal();

        }
        NCPP_FORCE_INLINE TU_object_p& operator = (TU_object_p&& x) noexcept
        {

            raw_object_p_ = (F_passed_object*)x.raw_object_p_;

            x.reset_no_destroy_internal();

            return *this;
        }

        template<T_is_object F_other__>
        requires T_is_object_down_castable<F_other__, F_passed_object>
        NCPP_FORCE_INLINE TU_object_p(TF_change_object<F_other__>&& x) noexcept :
            raw_object_p_((F_passed_object*)x.raw_object_p_)
        {

            x.reset_no_destroy_internal();

        }
        template<T_is_object F_other__>
        requires T_is_object_down_castable<F_other__, F_passed_object>
        NCPP_FORCE_INLINE TU_object_p& operator = (TF_change_object<F_other__>&& x) noexcept
        {

            raw_object_p_ = (F_passed_object*)x.raw_object_p_;

            x.reset_no_destroy_internal();

            return *this;
        }

        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////

    public:
        template<T_is_object F_other__>
        NCPP_FORCE_INLINE const TF_change_object<F_other__>& T_cast() const noexcept {

            return *((const TF_change_object<F_other__>*)this);
        }

        NCPP_FORCE_INLINE b8 is_valid() const noexcept {

            return (raw_object_p_ != 0);
        }
        NCPP_FORCE_INLINE b8 is_null() const noexcept {

            return (raw_object_p_ == 0);
        }



    private:
        NCPP_FORCE_INLINE void reset_no_destroy_internal() noexcept {

            raw_object_p_ = 0;
        }

    public:
        NCPP_FORCE_INLINE void reset() noexcept {

            destroy_object_internal();
            reset_no_destroy_internal();

        }



    private:
        NCPP_FORCE_INLINE void register_signature_internal() noexcept {


        }
        NCPP_FORCE_INLINE void deregister_signature_internal() noexcept {


        }



    public:
        template<typename... F_args__>
        inline void T_create_object(F_args__&&... args) {

            F_allocator allocator;

            raw_object_p_ = (F_passed_object*)allocator.allocate(
                sizeof(F_object),
                utilities::T_alignof<F_object>,
                0,
                0
            );

            new ((F_object*)raw_object_p_) F_object(std::forward<F_args__>(args)...);

            register_signature_internal();

        }

    private:
        NCPP_FORCE_INLINE void destroy_object_internal() noexcept {

            deregister_signature_internal();

            F_allocator allocator;

            ((F_object*)raw_object_p_)->~F_object();

            allocator.deallocate(raw_object_p_);

        }



    public:
        NCPP_FORCE_INLINE TW_object_p<F_passed_object> weak() const noexcept {

            return raw_object_p_;
        }
        NCPP_FORCE_INLINE operator TW_object_p<F_passed_object> () const noexcept {

            return weak();
        }

    };

}