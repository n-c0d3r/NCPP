#pragma once

/**
 *  @file ncpp/utilities/flag.hpp
 *  @brief Implements flag.
 */



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/prerequisites.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/utilities/nth_template_targ.hpp>

#pragma endregion



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



namespace ncpp {

    namespace utilities {

        template<typename F_flag__>
        using TF_flag_to_uint = TF_nth_template_targ<
            sizeof(F_flag__),
            void,
            u8,
            u16,
            void,
            u32,
            void,
            void,
            void,
            u64
        >;

        NCPP_FORCE_INLINE constexpr auto flag_combine(auto a1, auto a2) noexcept {

            using F_uint = TF_flag_to_uint<std::remove_const_t<decltype(a1)>>;

            return std::remove_const_t<decltype(a1)>(
                F_uint(a1)
                | F_uint(a2)
            );
        }
        NCPP_FORCE_INLINE constexpr auto flag_combine(auto a1, auto a2, auto a3, auto... rest) noexcept {

            return flag_combine(
                flag_combine(a1, a2),
                a3,
                rest...
            );
        }
        NCPP_FORCE_INLINE constexpr auto flag_remove(auto a1, auto a2) noexcept {

            using F_uint = TF_flag_to_uint<std::remove_const_t<decltype(a1)>>;

            return std::remove_const_t<decltype(a1)>(
                F_uint(a1)
                & (~F_uint(a2))
            );
        }
        NCPP_FORCE_INLINE constexpr auto flag_remove(auto a1, auto a2, auto a3, auto... rest) noexcept {

            return flag_remove(
                flag_remove(a1, a2),
                a3,
                rest...
            );
        }
        NCPP_FORCE_INLINE constexpr b8 flag_is_has(auto a1, auto a2) noexcept {

            using F_uint = TF_flag_to_uint<std::remove_const_t<decltype(a1)>>;

            return (
                F_uint(a2) == (
                    F_uint(a1)
                    & F_uint(a2)
                )
            );
        }
        NCPP_FORCE_INLINE constexpr b8 flag_is_has(auto a1, auto a2, auto a3, auto... rest) noexcept {

            return (
                flag_is_has(a1, a2)
                && flag_is_has(a1, a3, rest...)
            );
        }

    }

}