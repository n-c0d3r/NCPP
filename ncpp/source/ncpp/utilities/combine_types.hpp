#pragma once

/**
 *  @file ncpp/utilities/combine_types.hpp
 *  @brief Implements combine_types.
 */



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/prerequisites.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/utilities/template_targ_list.hpp>

#pragma endregion



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



namespace ncpp {

    namespace utilities {

        namespace combine_types_internal {

            template<typename F_list__>
            struct TF_list_to_combined_struct {
            };

            template<typename... F_types__>
            struct TF_list_to_combined_struct<utilities::TF_template_targ_list<F_types__...>> :
                public F_types__ ...
            {

                using F_type_list = TF_template_targ_list<F_types__...>;

            };

            template<typename F_type__>
            struct TF_modify_list_helper {

                using F = utilities::TF_template_targ_list<F_type__>;

            };
            template<typename F_list__>
            struct TF_modify_list_helper<TF_list_to_combined_struct<F_list__>> {

                using F = F_list__;

            };
            template<typename F_type__>
            struct TF_modify_list_helper<utilities::TF_template_targ_list<F_type__>> {

                using F = typename TF_modify_list_helper<F_type__>::F;

            };
            template<typename F_type__, typename... F_rest__>
            struct TF_modify_list_helper<utilities::TF_template_targ_list<F_type__, F_rest__...>> {

                using F_first_list = typename TF_modify_list_helper<F_type__>::F;
                using F_rest_list = typename TF_modify_list_helper<utilities::TF_template_targ_list<F_rest__...>>::F;

                using F = F_first_list::template TF_combine<F_rest_list>;

            };

            template<typename F__>
            using TF_modify_list = typename TF_modify_list_helper<F__>::F;

            template<typename... F_types__>
            using TF_combine_types_to_list = typename TF_modify_list<utilities::TF_template_targ_list<F_types__...>>::F_remove_repeats;

        }



        template<typename... F_types__>
        using TF_combine_types = combine_types_internal::TF_list_to_combined_struct<combine_types_internal::TF_combine_types_to_list<F_types__...>>;

    }

}

#define NCPP_COMBINE_TYPES(...) ncpp::utilities::TF_combine_types<__VA_ARGS__>